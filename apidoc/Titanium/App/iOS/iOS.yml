---
name: Titanium.App.iOS
summary: |
    The top-level App iOS module, available only to iOS devices, that includes the facilities to 
    create and manage local notifications and background services.
description: |
    Local notifications are a way for an application that is not running in the foreground to let 
    users know that it has information for them. When invoked, an alert dialog is displayed 
    containing a "Close" button to dismiss and a customizable "View" button to bring the application 
    into the foreground. Also, they can be configured to set an application icon badge, to show the 
    number of pending notifications, and to generate a sound.

extends: Titanium.Module
platforms: [iphone, ipad]
since: "1.5"

methods:
  - name: cancelAllLocalNotifications
    summary: Cancels all scheduled local notifications.
    
  - name: cancelLocalNotification
    summary: Cancels a local notification.
    parameters:
      - name: id
        summary: ID of the local notification to cancel.
        type: Number

  - name: registerBackgroundService
    summary: Registers a service to run when the application is placed in the background.
    returns:
        type: Titanium.App.iOS.BackgroundService
    parameters:
      - name: params
        summary: |
            Parameters used to create the service. Must include a `url` property, to specify the 
            local JavaScript file to execute when the application is placed in the background.
        type: Dictionary
        
  - name: scheduleLocalNotification
    summary: Schedule a local notification.
    returns:
        type: Titanium.App.iOS.LocalNotification
    parameters:
      - name: params
        summary: Parameters used to create a notification.
        type: Dictionary<NotificationParams>

  - name: setMinimumBackgroundFetchInterval
    summary: |
        Specifies the minimum amount of time that must elapse between background fetch operations.
        Available only on iOS 7 and later.
    description: |
        This property has no effect for apps that do not have the UIBackgroundModes key with
        the fetch value in its Info.plist file. The default fetch interval for apps is
        <Titanium.App.iOS.BACKGROUNDFETCHINTERVAL_NEVER>. Therefore, you must call this
        method and set a fetch interval before your app is given background execution time.
    parameters:
      - name: fetchInterval
        summary: |
            The minimum number of seconds that must elapse before another background fetch can be initiated.
            This value is advisory only and does not indicate the exact amount of time expected between
            fetch operations.

            Two system defined constants for this parameter are
            <Titanium.App.iOS.BACKGROUNDFETCHINTERVAL_NEVER> and <Titanium.App.iOS.BACKGROUNDFETCHINTERVAL_MIN>.
        type: Number
    osver: {ios: {min: "7.0"}}
    since: "3.2.0"

  - name: endBackgroundHandler
    summary: Marks the end of the app execution after initiating the download operation. Available only on iOS 7 and later.
    description: |
        When calling this method, pass in the `handlerID` value that initiated the background state.
        You must call this handler after initiating the download operation and should do so as soon as possible.
    parameters:
      - name: handlerID
        summary: |
            Unique string identifer for the event (`backgroundfetch`, `silentpush` or `backgroundtransfer`)
            that initiated the background opertation mode.
        type: String
    osver: {ios: {min: "7.0"}}
    since: "3.2.0"

properties:
  - name: EVENT_ACCESSIBILITY_LAYOUT_CHANGED
    summary: Convenience constant for system event "accessibilitylayoutchanged".
    type: String
    permission: read-only
    since: "3.0.0"

  - name: EVENT_ACCESSIBILITY_SCREEN_CHANGED
    summary: Convenience constant for system event "accessibilityscreenchanged".
    type: String
    permission: read-only
    since: "3.0.0"
    
  - name: BACKGROUNDFETCHINTERVAL_MIN
    summary: |
        Use with [setMinimumBackgroundFetchInterval](Titanium.App.iOS.setMinimumBackgroundFetchInterval) method.
        Specifies the smallest fetch interval supported by the system.
    type: Number
    permission: read-only
    osver: {ios: {min: "7.0"}}
    since: "3.2.0"

  - name: BACKGROUNDFETCHINTERVAL_NEVER
    summary: |
        Use with [setMinimumBackgroundFetchInterval](Titanium.App.iOS.setMinimumBackgroundFetchInterval) method.
        Used to specify a fetch interval large enough to prevent fetch operations from occurring.
    type: Number
    permission: read-only
    osver: {ios: {min: "7.0"}}
    since: "3.2.0"

events:
  - name: notification
    summary: Fired when a local notification is received by the application.
    properties:
      - name: alertAction
        summary: |
            Alert button text ('View', by default) or slider text ('slide to unlock...', by default).
        type: String

      - name: alertBody
        summary: Alert message.
        type: String
        
      - name: alertLaunchImage
        summary: Image displayed instead of `Default.png` when launching the application.
        type: String

      - name: badge
        summary: Application badge value.
        type: Number

      - name: date
        summary: Date and time when the notification was configured to fire.
        type: Date

      - name: sound
        summary: Path to the sound file configured to play when the notification was fired.
        type: String

      - name: timezone
        summary: Timezone of the date when the notification was configured to fire.
        type: String
        
      - name: userInfo
        summary: Custom data object.
        type: Dictionary

  - name: backgroundfetch
    summary: Fired when the application is woken up for a fetch operation. Available only on iOS 7 and later.
    description: |
        Add this event if your app supports the `fetch` UIBackground mode. When an opportunity arises to
        download data, the system fires this event to give your app a chance to download any data it needs.
        Your callback of this event should download the data, prepare that data for use, and call the
        [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler) method with the `handlerID` parameter from this event.

        When this event is fired, your app has up to 30 seconds of wall-clock time to perform the download
        operation and call the `endBackgroundHandler` method. In practice,
        your app should call the `endBackgroundHandler` method as soon as possible
        after initiating the download. If you do not call the `endBackgroundHandler` method in time, your app is suspended.
        More importantly, the system uses the elapsed time to calculate power usage and data costs for your
        app's background downloads. If your app takes a long time to call `endBackgroundHandler` method, it may be given fewer
        future opportunities to fetch data in the future.

        If you are downloading large content, initiate the download using a
        [urlSession](Modules.URLSession) background download task, then call the `endBackgroundHandler` method.
        Listen for the [downloadcompleted](Titanium.App.iOS.downloadcompleted) event to prepare the data for use.

        The event returns the dictionary containing the `handlerID` property, which is a unique handler ID for the
        current event. This identifier should be passed as the argument to the
        [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler) method.
    properties:
      - name: handlerId
        summary: |
            Unique string identifer for the `backgroundfetch` event. This identifier should be passed as the argument
            to the [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler) method.
        type: String
    platforms: [iphone, ipad]
    osver: {ios: {min: "7.0"}}
    since: '3.2.0'

  - name: silentpush
    summary: Fired when the application is woken up by a silent remote notification. Available only on iOS 7 and later.
    description: |
        Add this event if your app supports the `remote-notification` UIBackground mode.
        This event is intended as a means for apps to minimize the time that elapses between
        the user seeing a push notification and the app displaying the associated data.
        When a push notification arrives, the system displays the notification to the user and
        launches the app in the background (if needed) so that it can call this event.
        Use this event to download any data related to the push notification. When your method
        is done, call the [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler) method with
        `handlerID` parameter from this event.

        The system fires this event regardless of the state of your app. If your app is suspended
        or not running, the system wakes up or launches your app and puts it into the background
        running state before firing the event.

        When this event is fired, your app has up to 30 seconds of wall-clock time to perform the download
        operation and call the `endBackgroundHandler` method. In practice,
        your app should call the `endBackgroundHandler` method as soon as possible
        after initiating the download. If you do not call the `endBackgroundHandler` method in time, your app is suspended.
        More importantly, the system uses the elapsed time to calculate power usage and data costs for your
        app's background downloads. If your app takes a long time to call `endBackgroundHandler` method, it may be given fewer
        future opportunities to fetch data in the future.

        If you are downloading large content, initiate the download using a
        [urlSession](Modules.URLSession) background download task, then call the `endBackgroundHandler` method.
        Listen for the [downloadcompleted](Titanium.App.iOS.downloadcompleted) event to prepare the data for use.

        The event returns the dictionary containing the `handlerID` property, which is a unique handler ID for the
        current event. This identifier should be passed as the argument to the
        [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler) method.
    properties:
      - name: handlerId
        summary: |
            Unique string identifer for the `silentpush` event. This identifier should be passed as the argument
            to the [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler) method.
        type: String
    platforms: [iphone, ipad]
    osver: {ios: {min: "7.0"}}
    since: '3.2.0'

  - name: backgroundtransfer
    summary: |
        Fired when the events related to a [urlSession](Modules.URLSession) are waiting to be processed.
        Available only on iOS 7 and later.
    description: |
        The app fires this events when all background transfers associated with a `urlSession` object
        have finished or failed. Use this method to reconnect any `urlSession`s and to update your
        app's user interface. For example, you might use this method to update progress indicators
        or to incorporate new content into your views. After processing the events, call the
        [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler) method with the `handlerID`
        parameter. If a `urlSession` finishes its work when your app is not running, the system
        launches your app in the background so that it can process the event. In that situation,
        use the provided identifier to create a new `urlSessionConfiguration` and `urlSession` objects.
        Upon creating urlSession object, that object calls the appropriate delegate methods to
        process the events.

        If your app already has a session object with the specified identifier and is running or suspended,
        you do not need to create a new session object using this method. Suspended apps are moved into the
        background. As soon as the app is running again, the `urlSession` object with the identifier receives
        the events and processes them normally.

        At launch time, the app does not call this method if there are uploads or downloads in progress.
        If you want to display the current progress of those transfers in your app's user
        interface, you must recreate the session object yourself. In that situation, cache the session
        identifier value persistently and use it to recreate your session object.

    properties:
      - name: handlerId
        summary: |
            Unique string identifer for the `backgroundtransfer` event. This identifier should be passed as the argument
            to the [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler) method.
        type: String
      - name: sessionId
        summary: |
            The identifier of the URL session requiring attention. If your app was just launched,
            you can use this identifier to create a new `urlSession` object that can receive the events.
        type: String
    platforms: [iphone, ipad]
    osver: {ios: {min: "7.0"}}
    since: '3.2.0'

  - name: downloadprogress
    summary: |
        Fired periodically to inform the app about the download's progress of a [urlSession](Modules.URLSession).
        Available only on iOS 7 and later.
    description: |
        This event only needs to be used if your app is using the `urlSession` module to download data.
    properties:
      - name: taskIdentifier
        summary: The `urlSession` download task's identifer.
        type: Number

      - name: bytesWritten
        summary: The number of bytes transferred since the last time this event was fired.
        type: Number

      - name: totalBytesWritten
        summary: The total number of bytes transferred so far.
        type: Number

      - name: totalBytesExpectedToWrite
        summary: |
            The expected length of the file, as provided by the Content-Length header. If this
            header was not provided, the value is zero.
        type: Number
    osver: {ios: {min: "7.0"}}
    since: "3.2.0"

  - name: downloadcompleted
    summary: |
        Fired to indicate that a [urlSession's](Modules.URLSession) download task has finished downloading.
        Available only on iOS 7 and later.
    description: |
        This event only needs to be used if your app is using the `urlSession` module to download data.
    properties:
      - name: taskIdentifier
        summary: The `urlSession` download task's identifer.
        type: Number

      - name: data
        summary: The downloaded data as a Titanium.Blob object.
        type: Titanium.Blob
    osver: {ios: {min: "7.0"}}
    since: "3.2.0"

  - name: sessioncompleted
    summary: |
        Fired to indicate that a [urlSession](Modules.URLSession) task finished transferring data.
        Available only on iOS 7 and later.
    description: |
        This event only needs to be used if your app is using the `urlSession` module to download data.

        Server errors are not reported through the error parameter. The only error events sent
        through the error parameter are client-side errors, such as being unable to resolve
        the hostname or connect to the host.
    properties:
      - name: taskIdentifier
        summary: The `urlSession` download task's identifer.
        type: Number

      - name: success
        summary:  Indicates if the operation succeeded. Returns true if download succeeded, false otherwise.
        type: Boolean

      - name: errorCode
        summary: The error code of the error, if any (potentially system-dependent).
        type: Number

      - name: message
        summary: A string containing the localized description of the error.
        type: String
    osver: {ios: {min: "7.0"}}
    since: "3.2.0"

  - name: sessioneventscompleted
    summary: |
        Fired to indicate that all messages enqueued for a [urlSession](Modules.URLSession) have been delivered.
        Available only on iOS 7 and later.
    description: |
        This event only needs to be used if your app is using the `urlSession` module to download data.

        In iOS, when a background transfer completes and if your app is no longer running, your app
        is automatically relaunched in the background, and the app fires the [backgroundtransfer](Titanium.App.iOS.backgroundtransfer) event.
        This event should contain the identifier of the session that caused your app to be launched.
        Your app should then store that `handlerID` before creating a background session configuration object
        with the same identifier, and creating a url session object with that configuration.
        The newly created session is automatically reassociated with ongoing background activity.

        When your app later receives a `sessioneventscompleted` event, this indicates that
        all messages previously enqueued for this session have been delivered, and that it
        is now safe to invoke [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler)
        method with the `handlerID` or to begin any internal updates that may result in invoking
        this method.
    osver: {ios: {min: "7.0"}}
    since: "3.2.0"
---
name: NotificationParams
summary: |
    Dictionary object of parameters used to create a notification using 
    <Titanium.App.iOS.scheduleLocalNotification>.
since: "1.7"
platforms: [iphone, ipad]

properties:
  - name: alertAction
    summary: |
        Alert button text ('View', by default) or slider text ('slide to unlock...', by default) 
        to display.
    type: String
    optional: true
    
  - name: alertBody
    summary: Alert message to display.
    type: String
    optional: true
    
  - name: alertLaunchImage
    summary: Image to display instead of `Default.png` when launching the application.
    type: String
    optional: true
    
  - name: badge
    summary: Application badge value.
    type: Number
    optional: true

  - name: date
    summary: Date and time for the notification to occur.
    type: Date
    
  - name: repeat
    summary: Interval to repeat the notification. One of `weekly`, `daily`, `yearly,` `monthly`.
    type: String
    optional: true
    
  - name: sound
    summary: |
        Path to the sound file to play when notification occurs, relative to the `Resources` folder.
    type: String
    optional: true
    
  - name: timezone
    summary: |
        Timezone of the date configured for the notification. If not set, the system timezone is used.
    type: String
    optional: true
    
  - name: userInfo
    summary: Data to pass to the application with the notification event.
    type: Dictionary
    optional: true  
