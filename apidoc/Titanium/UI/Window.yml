---
name: Titanium.UI.Window
summary: The Window is an empty drawing surface or container.
extends: Titanium.UI.View
since: "0.9"
excludes: { methods:[removeAllChildren] }

methods:
  - name: close
    summary: Closes the window.
    description: |
        Android only supports the argument type <closeWindowParams>.
    parameters:
      - name: params
        summary: Animation or display properties to use when closing the window.
        type: [Dictionary<Titanium.UI.Animation>, closeWindowParams]
        optional: true
    
  - name: hideTabBar
    summary: Hides the tab bar. Must be called before opening the window.
    description: |
        To hide the tab bar when opening a window as a child of a tab, call
        `hideTabBar` or set `tabBarHidden` to `true` **before** opening the window.
        
        If the window is not a child of a tab, this method has no effect.
    platforms: [iphone,ipad]

  - name: open
    summary: Opens the window.
    parameters:
      - name: params
        summary: Animation or display properties to use when opening the window.
        type: openWindowParams
        optional: true

  - name: setToolbar
    summary: Sets the array of items to show in the window's toolbar.
    parameters:
      - name: items
        summary: Array of button objects to show in the window's toolbar.
        type: Array<Object>
      - name: params
        summary: Parameters to control the toolbar appearance.
        type: windowToolbarParam
        optional: true
    platforms: [iphone,ipad]

events:
  - name: android:back
    deprecated:
        since: "3.0.0"
        notes: |
            Renamed to [androidback](Titanium.UI.Window.androidback) (without a colon).
    platforms: [android]
    summary: Fired when the Back button is released.
    description: |
        Setting a listener disables the default key handling for the Back button.
        To restore default behavior, remove the listener. It is recommended that you only
        have one handler per heavyweight window.

  - name: android:camera
    deprecated:
        since: "3.0.0"
        notes: |
            Renamed to [androidcamera](Titanium.UI.Window.androidcamera) (without a colon).
    summary: Fired when the Camera button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per heavyweight window.
    platforms: [android]

  - name: android:focus
    deprecated:
        since: "3.0.0"
        notes: |
            Renamed to [androidfocus](Titanium.UI.Window.androidfocus) (without a colon).
    summary: Fired when the Camera button is half-pressed then released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per heavyweight window.
    platforms: [android]

  - name: android:search
    deprecated:
        since: "3.0.0"
        notes: |
            Renamed to [androidsearch](Titanium.UI.Window.androidsearch) (without a colon).
    summary: Fired when the Search button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have
        one handler per heavyweight window.
    platforms: [android]

  - name: android:voldown
    deprecated:
        since: "3.0.0"
        notes: |
            Renamed to [androidvoldown](Titanium.UI.Window.androidvoldown) (without a colon).
    summary: Fired when the volume down button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per heavyweight window.
    platforms: [android]

  - name: android:volup
    deprecated:
        since: "3.0.0"
        notes: |
            Renamed to [androidvolup](Titanium.UI.Window.androidvolup) (without a colon).
    summary: Fired when the volume up button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per heavyweight window.
    platforms: [android]

  - name: androidback
    platforms: [android]
    summary: Fired when the back button is pressed by the user.
    description: |
        This event is fired when the current window's activity detects
        a back button press by the user to navigate back.

        By default this event would trigger the current activity to be finished
        and removed from the task stack. Subscribing to this event with a listener
        will prevent the default behavior. To finish the activity from your listener
        just call the *close* method of the window.

        This event replaces the android:back event. Some behavior
        changes may exist such as the event no longer firing when the
        user dismisses the keyboard with the back button or when the
        user closes a full-screen video which is embedded in a web view
        with the back button.

    since: '3.0.0'

  - name: androidcamera
    summary: Fired when the Camera button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per heavyweight window.
    platforms: [android]
    since: '3.0.0'

  - name: androidfocus
    summary: Fired when the Camera button is half-pressed then released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per heavyweight window.
    platforms: [android]
    since: '3.0.0'

  - name: androidsearch
    summary: Fired when the Search button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have
        one handler per heavyweight window.
    platforms: [android]
    since: '3.0.0'

  - name: androidvoldown
    summary: Fired when the volume down button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per heavyweight window.
    platforms: [android]
    since: '3.0.0'

  - name: androidvolup
    summary: Fired when the volume up button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per heavyweight window.
    platforms: [android]
    since: '3.0.0'

  - name: blur
    summary: Fired when the window loses focus.
    description: |
        On Android, this event also fires before putting the activity in the background
        (before the activity enters the pause state).

        On iOS, this event does not fire before putting the application in the background.
        The application needs to monitor the <Titanium.App.pause> event.
        See <Titanium.App> for more information on the iOS application lifecycle.

  - name: close
    summary: Fired when the window is closed.

  - name: focus
    summary: Fired when the window gains focus.
    description: |
        The listener for this event must be defined before this window
        is opened.

        On Android, this event also fires when the activity enters the foreground
        (after the activity enters the resume state).

        On iOS, this event does not fire after the application returns to the foreground
        if it was previously backgrounded.
        The application needs to monitor the <Titanium.App.resumed> event.
        See <Titanium.App> for more information on the iOS application lifecycle.
    platforms: [android, blackberry, iphone, ipad, mobileweb, tizen]

  - name: open
    summary: Fired when the window is opened.
    description: |
        The listener for this event must be defined before this window
        is opened.

properties:
  - name: activity
    summary: |
        For lightweight windows, this property returns undefined.
        For heavyweight windows, this property contains a reference to the
        Android Activity object associated with this window.
    description: |
        An Activity object is not created until the window is opened.
        Before the window is opened, `activity` refers to an empty JavaScript object.
        You can be set properties on this object, but cannot invoke any Activity methods on it.
        Once the window is opened, the actual Activity object is created,
        using any properties set on the JavaScript object. At this point, you can call methods
        on the activity and access any properties that are set when the activity is created,
        for example, [actionBar](Titanium.Android.Activity.actionBar).
    platforms: [android]
    type: Titanium.Android.Activity
    permission: read-only

  - name: backButtonTitle
    summary: Title for the back button. This is only valid when the window is a child of a tab.
    platforms: [iphone, ipad]
    type: String

  - name: backButtonTitleImage
    summary: The image to show as the back button.
        This is only valid when the window is a child of a tab.
    platforms: [iphone, ipad]
    type: [String, Titanium.Blob]

  - name: backgroundColor
    summary: Background color of the window, as a color name or hex triplet.
    description: |
        On Android, to specify a semi-transparent background, set the alpha value using the
        [opacity](Titanium.UI.Window.opacity) property before opening the window.

        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: String
    default: Transparent

  - name: barColor
    summary: |
        Background color for the nav bar, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>. 
    platforms: [iphone, ipad, mobileweb, tizen]
    type: String

  - name: barImage
    summary: Background image for the nav bar, specified as a URL to a local image.
    description: |
        The behavior of this API on iOS has changed from version 3.2.0. Previous versions
        of the SDK created a custom image view and inserted it as a child of the navigation bar.
        The titanium sdk now uses the native call to set the background image of the navigation bar.
    platforms: [iphone, ipad, mobileweb, tizen]
    type: String

  - name: bottom
    summary: Window's bottom position, in platform-specific units.
    description: |
        On Android, this property only works with lightweight windows.
        See "Android Heavyweight and Lightweight Windows" in the main description
        of Titanium.UI.Window for more information.
    type: [Number,String]
    default: 0

  - name: exitOnClose
    summary: |
        Boolean value indicating if the application should exit when the Android
        Back button is pressed while the window is being shown.
    description:  |
        You can only set this as a createWindow({...}) option.  Setting it after
        window creation has no effect.
    platforms: [android]
    default: false
    type: Boolean
    availability: creation

  - name: extendEdges
    summary: |
        An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>. Valid on iOS 7 and greater.
    description:  |
        This is only valid for windows hosted by navigation controllers or tab bar controllers. This property is used to
        determine the layout of the window within its parent view controller. For example if the window is specified to extend its top edge
        and it is hosted in a navigation controller, then the top edge of the window is extended underneath the navigation bar so that part
        of the window is obscured. If the navigation bar is opaque (translucent property on window is false), then the top edge of the window
        will only extend if <Titanium.UI.Window.includeOpaqueBars> is set to true. 

        The default behavior is to assume that no edges are to be extended. Must be specified before **opening** the window.
    platforms: [iphone,ipad]
    type: Array<Number>
    since: 3.1.3
    osver: {ios: {min: "7.0"}}

  - name: includeOpaqueBars
    summary: |
        Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar). Valid on iOS 7 and greater.
    description:  |
        By default edges are only extended to include translucent bars. However if this is set to true, then edges are extended beyond
        opaque bars as well.

        The default behavior assumes that this is false. Must be specified before **opening** the window.
    platforms: [iphone,ipad]
    type: Boolean
    since: 3.1.3
    osver: {ios: {min: "7.0"}}

  - name: autoAdjustScrollViewInsets
    summary: |
        Specifies whether or not the view controller should automatically adjust its scroll view insets. Valid on iOS 7 and greater.
    description:  |
        When the value is true, it allows the view controller to adjust its scroll view insets in response to the screen areas consumed by the status bar, navigation bar, toolbar and tab bar.

        The default behavior assumes that this is false. Must be specified before **opening** the window.
    platforms: [iphone,ipad]
    type: Boolean
    since: 3.1.3
    osver: {ios: {min: "7.0"}}

  - name: fullscreen
    summary: Boolean value indicating if the window is fullscreen.
    description: |
        A fullscreen window occupies all of the screen space, hiding the status bar. Must be specified
        at creation time or in the `options` dictionary passed to the [Window.open](Titanium.UI.Window.open) method.

        On iOS the behavior of this property has changed. Starting from 3.1.3, if this property is undefined
        then the property is set to the value for UIStatusBarHidden defined in tiapp.xml.
        If that is not defined it is treated as **explicit false**. On earlier versions, opening a window with this property
        undefined would not effect the status bar appearance.

        On Android, setting this property forces the creation of a heavyweight window before Titanium 3.2.0.
        See "Android Heavyweight and Lightweight Windows" in the main description of this class for more
        information.
    platforms: [android, iphone, ipad]
    type: Boolean
    default: false

  - name: hideShadow
    summary: Set this to true to hide the shadow image of the navigation bar.
    description: |
        This property is only honored if a valid value is specified for the [barImage](Titanium.UI.Window.barImage) property.
    platforms: [iphone, ipad]
    type: Boolean
    default: false
    since: 3.2.0

  - name: left
    summary: Window's left position, in platform-specific units.
    description: |
        On Android, this property only works with lightweight windows.
        See "Android Heavyweight and Lightweight Windows" in the main description
        of Titanium.UI.Window for more information.
    type: [Number,String]
    default: 0

  - name: leftNavButton
    summary: View to show in the left nav bar area.
    platforms: [iphone, ipad, mobileweb, tizen]
    type: Titanium.UI.View

  - name: modal
    summary: Boolean to indicate if the window should be opened modal in front of other windows.
    description: |
        Must be specified at creation time or in the `options` dictionary passed to the
        [Window.open](Titanium.UI.Window.open) method.

        Android note:  Android modal windows are translucent. Before Android API 14, everything behind the
        modal window is blurred. On API 14 and above, blurring is no longer supported and will not work as expected because the flag
        [FLAG_BLUR_BEHIND](http://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_BLUR_BEHIND)
        is deprecated. The combination of `fullscreen:true` and `modal:true` will not work as
        expected. In Android, the contents of a translucent window cannot appear above the status bar.  I.e. even though
        you set `fullscreen:true`, the status bar will still be visible *if* it was visible
        in the previous window. `navBarHidden` and `modal` do work fine together, however.

        On Android, setting this property forces the creation of a heavyweight window before Titanium 3.2.0. See "Android
        Heavyweight and Lightweight Windows" in the main description of this class for more
        information.
        
        iOS note: modal windows should not support orientation modes that the
        window they are opened over do not support. Doing otherwise *may* cause
        bad visual/redraw behavior after the modal is dismissed, due to how
        iOS manages modal transitions. Beginning with 3.1.3, if the orientationModes property of a 
        modal window is undefined, then the orientations supported by this window would be the orientationModes
        specified by tiapp.xml.
        
        Mobile Web and Tizen note: On Mobile Web and Tizen, windows are always modal, blocking input to underlying 
        windows. If the window does not occupy the full screen, setting `modal` to `true` provides 
        a visual cue by dimming any background windows. If the window occupies the full screen, 
        `modal` has no effect.

        On the BlackBerry platform, the very first window in the application cannot be modal, therefore the modal flag will be ignored
        if set on the first window.

        On Mobile Web, Tizen, iOS, and BlackBerry the modal property has no effect on whether the window is 
        translucent or opaque.
    type: Boolean
    default: false

  - name: navBarHidden
    summary: Hides the nav bar (`true`) or shows the nav bar (`false`).
    description: |
        Must be specified at creation time or in the `options` dictionary passed to the 
        [Window.open](Titanium.UI.Window.open) method.

        **Beginning with 3.1.3**, this is no longer a valid parameter passed to the [Window.open](Titanium.UI.Window.open) method.
        Modal windows on iOS no longer have a navigation controller and hence **do not** have a nav bar.

        On Android, setting this property forces the creation of a heavyweight window before Titanium 3.2.0. See "Android
        Heavyweight and Lightweight Windows" in the main description of this class for more
        information. Setting this property to true disables the Action Bar since it is part of the navigation title bar.
    platforms: [android, iphone, ipad, mobileweb, tizen]
    default: false
    type: Boolean

  - name: navTintColor
    summary: The tintColor to apply to the navigation bar. This property is applicable on iOS 7 and greater. 
    description: |
        This property is a direct correspondant of the tintColor property of NavigationBar on iOS.
    type: [String]
    since: "3.1.3"
    default: null
    osver: {ios: {min: "7.0"}}
    platforms: [iphone,ipad]
    
  - name: opacity
    summary: The opacity from 0.0-1.0.
    description: |
        iOS Notes: For modal windows that cover the previous window, the previous window is 
        removed from the render stack after the modal window finishes opening. If the 
        modal window is semi-transparent, the underlying window will be visible during the 
        transition animation, but disappear as soon as the animation is completed. (In general 
        all modal windows cover the previous window, except for iPad modal windows using the 
        Page sheet or Form sheet style.)

        Android Notes: If you set any of `windowSoftInputMode`, `fullscreen`, or `navBarHidden`,
        *and* you wish to use the `opacity` property at any time during the window's lifetime,
        be sure to set an `opacity` value **before** opening the window.  You can later change that
        value -- and you can set it to 1 for full opacity if you wish -- but the important thing
        is that you set it to a value before opening the window if you will want to set it at
        any time during the window's lifetime.

        The technical reason for this is that if the opacity property is present (i.e., has
        been set to something) and a new Android Activity is created for the window,
        then a translucent theme will be used for the Activity.  Window transparency (opacity
        values below 1) will only work in Android if the Activity's theme is translucent, and
        Titanium only uses a translucent theme for an Activity if you set an opacity property
        before opening the window.  Additionally, do not use `opacity` and `fullscreen: true`
        together, because translucent themes in Android cannot hide the status bar.  Finally,
        if you do set the `opacity` property, be sure to also set a `backgroundImage` or
        `backgroundColor` property as well, unless you want the window to be completely
        transparent.
    type: Number

  - name: orientationModes
    summary: |
        Array of supported orientation modes, specified using the orientation
        constants defined in <Titanium.UI>.
    description: |
        To restrict this window to a certain set of orientations, specify one or more
        of the orientation constants [LANDSCAPE_LEFT](Titanium.UI.LANDSCAPE_LEFT),
        [LANDSCAPE_RIGHT](Titanium.UI.LANDSCAPE_RIGHT), [PORTRAIT](Titanium.UI.PORTRAIT),
        [UPSIDE_PORTRAIT](Titanium.UI.UPSIDE_PORTRAIT).

        `orientationModes` must be set **before** opening the window.

        To determine the current orientation of the *window*, see
        [Window.orientation](Titanium.UI.Window.orientation).
        To determine the current orientation of the *device*, see
        [Gesture.orientation](Titanium.Gesture.orientation). 
        To be notified when the device's current orientation changes, add a listener for the 
        <Titanium.Gesture.orientationchange> event.

        #### Android Orientation Modes

        On Android, `orientationModes` only takes effect when specified on a heavyweight
        window.

        On Android, orientation behavior is dependent on the Android SDK level
        of the device itself. Devices running Android 2.3 and above support "sensor portait
        mode" and "sensor landscape mode," in these modes, the device is locked into
        either a portrait or landscape orientation, but can switch between the normal and reverse
        orientations (for example, between PORTRAIT and UPSIDE_PORTRAIT).

        In addition, the definition of portrait or
        landscape mode can vary based on the physical design of the device. For example,
        on some devices <Titanium.UI.LANDSCAPE_LEFT> represents the top of the device being at
        the 270 degree position but other devices may (based on camera position for example)
        treat this position as <Titanium.UI.LANDSCAPE_RIGHT>. In general, applications for
        Android that need to be aware of orientation should try and limit their orientation
        logic to handling either portrait or landscape rather than worrying about the reverse
        modes. This approach will allow the orientation modes to adopt a more natural feel for
        the specific device.

        The following list breaks down the orientation behavior on Android based on the contents
        of the `orientationModes` array:

        1.  Empty array. Enables orientation to be fully controlled by the device sensor.

        2.  Array includes one or both portrait modes **and** one or both landscape modes.
            Enables full sensor control (identical to an empty array).

        3.  Array contains PORTRAIT **and** UPSIDE_PORTRAIT. On Android 2.3 and above,
            enables sensor portrait mode. This means the screen will shift between
            both portrait modes according to the sensor inside the device.

            On Android versions below 2.3, locks screen orientation in normal portrait mode.

        4.  Array contains LANDSCAPE_LEFT **and** LANDSCAPE_RIGHT. On Android 2.3 and above,
            enables sensor landscape mode. This means the screen will shift between both
            landscape modes according to the sensor inside the device.

            On Android versions below 2.3, locks screen orientation in normal landscape mode.

        5.  Array contains **only** [PORTRAIT](Titanium.UI.PORTRAIT). Locks screen orientation
            to normal portrait mode.

        6.  Array contains **only** [LANDSCAPE_LEFT](Titanium.UI.LANDSCAPE_LEFT). Locks screen
            orientation to normal landscape mode.

        7.  Array contains **only** [UPSIDE_PORTRAIT](Titanium.UI.UPSIDE_PORTRAIT). On
            Android 2.3 and above, locks screen in reverse portrait mode. 

            On Android versions below 2.3, results are undefined.

        8.  Array contains **only**  [LANDSCAPE_RIGHT](Titanium.UI.LANDSCAPE_RIGHT). On
            Android 2.3 and above, locks screen in reverse landscape mode. 

            On Android versions below 2.3, results are undefined.
        
    platforms: [android, iphone, ipad]
    type: Array<Number>
    default: empty array

  - name: orientation
    summary: Current orientation of the window.
    description: |
        Value will be one of the orientation constants defined in <Titanium.UI>. 
        
        To determine the current orientation of the *device*, see
        [Gesture.orientation](Titanium.Gesture.orientation), instead.
        
        See
        the discussion of the [orientationModes](Titanium.UI.Window.orientationModes)
        property for more information on how the screen orientation is determined.
    platforms: [android, iphone, ipad]
    since: {iphone: "3.0.0", ipad: "3.0.0"}
    type: Number
    permission: read-only

  - name: right
    summary: Window's right position, in platform-specific units.
    description: |
        On Android, this property only works with lightweight windows.
        See "Android Heavyweight and Lightweight Windows" in the main description
        of Titanium.UI.Window for more information.
    type: [Number,String]
    default: 0

  - name: rightNavButton
    summary: View to show in the right nav bar area.
    platforms: [iphone, ipad, mobileweb, tizen]
    type: Titanium.UI.View
    
  - name: shadowImage
    summary: Shadow image for the navigation bar, specified as a URL to a local image..
    description: |
        This property is only honored if a valid value is specified for the [barImage](Titanium.UI.Window.barImage) property.
    platforms: [iphone, ipad]
    type: String
    since: 3.2.0

  - name: statusBarStyle
    summary: The status bar style associated with this window. 
    description: |
        Sets the status bar style when this window has focus. This is now the recommended way to control the
        status bar style on the application.

        If this value is undefined, the value is set to UIStatusBarStyle defined in tiapp.xml.
        If that is not defined it defaults to <Titanium.UI.iPhone.StatusBar.DEFAULT>.
    type: [Number]
    since: "3.1.3"
    platforms: [iphone,ipad]
    
  - name: tabBarHidden
    summary: |
        Boolean value indicating if the tab bar should be hidden. 
    description: |
        `tabBarHidden` must be set **before** opening the window.

        This property is only valid when the window is the child of a tab.
    platforms: [iphone,ipad]
    type: Boolean

  - name: title
    summary: Title of the window.
    description: |
        On BlackBerry, this property automatically creates a `navBar` and sets the title on it.
    type: String

  - name: titleAttributes
    summary: Title text attributes of the window.
    description: |
        Use this property to specify the color, font and shadow attributes of the title.
    since: "3.2.0"
    platforms: [iphone, ipad]
    type: titleAttributesParams

  - name: titleControl
    summary: View to show in the title area of the nav bar.
    platforms: [iphone, ipad, mobileweb, tizen]
    type: Titanium.UI.View

  - name: titleImage
    summary: Image to show in the title area of the nav bar, specified as a local file path or URL.
    platforms: [iphone, ipad, mobileweb, tizen]
    type: String

  - name: titlePrompt
    summary: Title prompt for the window.
    platforms: [iphone, ipad]
    type: String

  - name: titleid
    summary: Key identifying a string from the locale file to use for the window title.
    description: Only one of `title` or `titleid` should be specified.
    type: String
    exclude-platforms: [blackberry]

  - name: titlepromptid
    summary: Key identifying a string from the locale file to use for the window title prompt.
    description: Only one of `titlePrompt` or `titlepromptid` should be specified.
    platforms: [iphone, ipad]
    type: String

  - name: toolbar
    summary: |
        Array of button objects to show in the window's toolbar. This is only valid when
        the window has a navigation controller.
    platforms: [iphone, ipad]
    type: Array<Object>
    permission: read-only

  - name: top
    summary: Window's top position, in platform-specific units.
    description: |
        On Android, this property only works with lightweight windows.
        See "Android Heavyweight and Lightweight Windows" in the main description
        of Titanium.UI.Window for more information.
    type: [Number,String]
    default: 0

  - name: transitionAnimation
    summary: |
        Use a transition animation when opening or closing windows in a
        <Titanium.UI.iOS.NavigationWindow> or <Titanium.UI.Tab>.
    description: |
        Create the transition animation using the <Titanium.UI.iOS.createTransitionAnimation>
        method.

        Supported on iOS 7 and later.
    type: Titanium.Proxy
    since: "3.2.0"
    platforms: [iphone, ipad]
    osver: {ios: {min: "7.0"}}

  - name: translucent
    summary: Boolean value indicating if the nav bar is translucent.
    platforms: [iphone, ipad, mobileweb, tizen]
    default: true on iOS7 and above, false otherwise.
    type: Boolean

  - name: url
    summary: Local URL to a JavaScript file with the windows instructions.
    description: |
        This window will create a new JavaScript sub-context that will run
        in its own thread and global variable space. See the "Sub-contexts" section
        in the main description for [Window](Titanium.UI.Window).
    type: String
    availability: creation
    exclude-platforms: [blackberry]

  - name: windowSoftInputMode
    summary: |
        Determines whether a heavyweight window's soft input area (ie software keyboard) is visible 
        as it receives focus and how the window behaves in order to accomodate it while keeping its 
        contents in view.
    description: |
        In order for this property to take effect on an emulator, its Android Virtual Device (AVD) 
        must be configured with the `Keyboard Support` setting set to `No`. Note that it is always 
        recommended to test an application on a physical device to understand its true behavior.

        Setting this property forces the creation of a heavyweight window before Titanium 3.2.0. See "Android Heavyweight
        and Lightweight Windows" in the main description of this class for more information.
        
        This property is capable of representing two settings from the following two groups of 
        settings using the [bitwise OR](http://en.wikipedia.org/wiki/Bitwise_operation#OR) operation. 
        
        One of the group of soft input *visibility* constants, 
        [SOFT_INPUT_STATE_ALWAYS_HIDDEN](Titanium.UI.Android.SOFT_INPUT_STATE_ALWAYS_HIDDEN), 
        [SOFT_INPUT_STATE_ALWAYS_VISIBLE](Titanium.UI.Android.SOFT_INPUT_STATE_ALWAYS_VISIBLE), 
        [SOFT_INPUT_STATE_HIDDEN](Titanium.UI.Android.SOFT_INPUT_STATE_HIDDEN), 
        [SOFT_INPUT_STATE_UNSPECIFIED](Titanium.UI.Android.SOFT_INPUT_STATE_UNSPECIFIED), 
        or [SOFT_INPUT_STATE_VISIBLE](Titanium.UI.Android.SOFT_INPUT_STATE_VISIBLE).
        
        One of the group of soft input *adjustment* constants, 
        [SOFT_INPUT_ADJUST_UNSPECIFIED](Titanium.UI.Android.SOFT_INPUT_ADJUST_UNSPECIFIED), 
        [SOFT_INPUT_ADJUST_RESIZE](Titanium.UI.Android.SOFT_INPUT_ADJUST_RESIZE), 
        or [SOFT_INPUT_ADJUST_PAN](Titanium.UI.Android.SOFT_INPUT_ADJUST_PAN).
        
        Note that in Javascript, bitwise OR is achieved using the single pipe operand. See the 
        example for a demonstration.
        
        For more information, see the official Android Developers website API Reference for 
        [Window.setSoftInputMode](http://developer.android.com/reference/android/view/Window.html#setSoftInputMode(int)).
    platforms: [android]
    type: Number
    availability: creation
    examples:
      - title: Soft Input Visibility and Adjustment
        example: |
            Create a white window and respond to a click of it to open a red window containing a 
            text area. Show the software keyboard automatically as the red window opens.
                
                var win1 = Ti.UI.createWindow({
                  backgroundColor: 'white',
                  exitOnClose: true,
                  fullscreen: false,
                  title: 'Click window to test'
                });

                // use bitwise OR to combine two settings for the windowSoftInputMode property
                var softInput = Ti.UI.Android.SOFT_INPUT_STATE_ALWAYS_VISIBLE | Ti.UI.Android.SOFT_INPUT_ADJUST_PAN;

                win1.addEventListener('click', function(){
                var win2 = Ti.UI.createWindow({
                  backgroundColor: 'red',
                  fullscreen: false,
                  windowSoftInputMode: softInput
                });

                var textArea = Ti.UI.createTextArea({
                  value : 'I am a textarea',
                  height : 200,
                  width : 300,
                  top : 200
                });
                win2.add(textArea);
                win2.open();
                });

                win1.open();

  - name: windowPixelFormat
    summary: Set the pixel format for the Activity's Window.
    description: |
        The property is ignored on a Titanium "lightweight" Window. Use one of the
        <Titanium.UI.Android>.PIXEL_FORMAT constants to set the format.

        For more information on pixel formats, see 
        [Android SDK Window.setFormat](http://developer.android.com/reference/android/view/Window.html#setFormat(int))
    platforms: [android]
    type: Number
    since: "1.8.0"

description: |
    A window is a top-level container which can contain other views. Windows can
    be *opened* and *closed*.  Opening a window causes the window and its child 
    views to be added to the application's render stack, on top of any previously opened 
    windows. Closing a window removes the window and its children from the render stack.

    Windows *contain* other views, but in general they are not *contained* inside
    other views. There are a few specialized views that manage windows:
    
    * [NavigationWindow](Titanium.UI.iOS.NavigationWindow)
    * [SplitWindow](Titanium.UI.iPad.SplitWindow)
    * [TabGroup](Titanium.UI.TabGroup)
    * [Tab](Titanium.UI.Tab)
    * [NavigationGroup](Titanium.UI.MobileWeb.NavigationGroup)

    By default, windows occupy the entire screen except for the navigation bar, 
    status bar, and in the case of windows contained in tab groups, the tab bar.
    To take up the entire screen, covering any other UI, specify `fullscreen:true`
    when creating the window.

    Use the <Titanium.UI.createWindow> method to create a window.

    #### Sub-contexts

    Windows can be loaded from another JavaScript file by specifying the property `url`,
    referencing a file relative to your application `Resources` folder.  It's important
    to note that Titanium will refuse to load JavaScript files from a remote URL. Loading
    remote JavaScript from a URL and providing it with the full capabilities of the Titanium
    API would be very dangerous.

    When your Window is loaded from a separate JavaScript file, the code will be executed in
    a separate JavaScript context (called a "sub-context") than your `app.js` global context.
    It will also execute in its own separate thread.

    The special property <Titanium.UI.currentWindow> is available inside a sub-context that
    points to the JavaScript instance by reference in the global context.


    #### Passing Data Between Contexts

    By default, sub-context variables cannot access JavaScript references in the global context.
    There are two ways to pass data between the global context and the sub-context:

    - Shared references
    - Events

    **Note that in both cases, you cannot pass functions between contexts, only serializable data.**
    *Serializable data* includes any JavaScript primitive or simple object composed
    of JavaScript primitives.

    ##### Passing Data with Shared References

    You can allow a sub-context access to
    properties in the global context by reference assignment.  An example best illustrates
    how to do this.

    In `app.js`, you could define a property:

        var message = "Hi world!";

    Now, you can create a new Window - let's call it `foo.js` - in your `app.js`.

        var w = Titanium.UI.createWindow({
          url:'foo.js'
        });

    To _give_ your new window access to `message`, you would need to assign it to a
    property on the new window reference, `w`.

        w.myAlertMessage = message;

    This creates a new `myAlertMessage` property on the new window that holds a reference to the
    `message` property in the global context.  Now, let's look at the code for `foo.js`.

        alert(Titanium.UI.currentWindow.myAlertMessage);

    In the above code, the `foo.js` will show an alert containing the text from the `message`
    property in the global context.

    **Note:** You should use caution when adding a custom property to a Titanium object.
    Your property might overwrite an existing property or conflict with a future Titanium 
    property.  If you do this, try to choose a property name unlikely to be used by the Titanium SDK
    in the future. 

    ##### Passing Data with Events

    If you'd like to send events to a window from the global context and vice versa, you could
    use the built-in event mechanism.  For example, you could define a custom event called `foo`.
    The window could listen for this event and then respond with some action. For example, in
    your sub-context you might define:

        Titanium.UI.currentWindow.addEventListener('foo',function(e)
        {
          Titanium.API.info("foo event received = "+JSON.stringify(e));
        });

    You could now fire the event from `app.js` like this:

        var window = Titanium.UI.createWindow({
          url:'bar.js'
        });
        window.open();
        window.fireEvent('foo',{a:'b'});

    It's worth noting two important limitations of the example above:

    * You must open the window before you can send events to it. You also may have to fire
      the event after a specified amount of time if you intend to immediately send data to
      the window. This is because windows are opened asynchronously and on a separate thread
      than the caller thread.

    * You can only send JSON-serializable data in `fireEvent`. If you attempt to send objects
      that have function references, they will be null.


    #### Animations

    Windows can be animated like any normal [View](Titanium.UI.View). To transition between
    2 windows, you can use the `transition` property on an animation (not supported on Android).
    For example, to flip right-to-left between two windows, you could do the following:

        var window2 = Titanium.UI.createWindow({url:'foo.js'});
        var t = Ti.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT;
        window1.animate({view:window2,transition:t});

    In the above example, the `window2` view will be animated from the right-to-left over `window1`.

    Windows can be opened or closed with animation.  In the example below, we create a window
    that will open from small to large with a bounce effect.  This is done by applying a
    transformation at initialization time that scales the original size of the window to 0.
    When the window is opened, a new 2D transformation is applied that will scale the window
    size from 0 to 110% of it's original size and then, after 1/20th of a second, will scale it
    back to it's original size at 100%. This gives the bounce effect during animation.

        var t = Titanium.UI.create2DMatrix().scale(0);

        // create a window with the initial transform scaled to 0
        var w = Titanium.UI.createWindow({
          backgroundColor:'#336699',
          borderWidth:8,
          borderColor:'#999',
          height:400,
          width:300,
          borderRadius:10,
          opacity:0.92,
          transform:t
        });

        // create first transform to go beyond normal size
        var t1 = Titanium.UI.create2DMatrix().scale(1.1);

        var a = Titanium.UI.createAnimation();
        a.transform = t1;
        a.duration = 200;

        // when this animation completes, scale to normal size
        a.addEventListener('complete', function()
        {
            // we can use the identity transform to take it back to it's real size
          var t2 = Titanium.UI.create2DMatrix();
          w.animate({transform:t2, duration:200});
        });

    Note that to animate an Android heavyweight window while you open it, you need
    to follow a specific procedure which is explained below in "Heavyweight
    Window Transitions in Android".

    #### iPad Modal Windows

    For iPad, iPhone SDK 3.2 and Titanium 1.2 introduced several new ways of presenting
    modal windows. In addition to full-screen modal windows, the iPad supports "Page sheet"
    and "Form sheet" style windows:

    * **Page sheet** style windows have a fixed width, equal to the width of the screen 
      in portait mode, and a height equal to the *current* height of the screen. This means
      that in portrait mode, the window covers the entire screen. In landscape mode, 
      the window is centered on the screen horizontally.

    * **Form sheet** style windows are smaller than the screen size, and centered on the screen.

    The example below is a modal window using the Form sheet style:

    ![modal](http://img.skitch.com/20100406-bqb3f8pb6e4ger7wkcdcw5mbar.png)

    You can create this type of modal window on iPad with the following code snippet:

        var window = Titanium.UI.createWindow();
        window.open({
          modal:true,
          modalTransitionStyle: Ti.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL,
          modalStyle: Ti.UI.iPhone.MODAL_PRESENTATION_FORMSHEET
        })

    #### Android Heavyweight and Lightweight Windows

    ***Before Titanium 3.2.0*** in Android, Titanium windows can be heavyweight or lightweight:

    - A *heavyweight* window is associated with a new Android 
      [Activity](Titanium.Android.Activity).

    - A *lightweight* window is a fullscreen view, and runs in the current Android Activity.

    The [createWindow](Titanium.UI.createWindow) call creates a heavyweight window 
    if any of the following properties are defined (set to either `true` or `false`)
    on creation:

    * `fullscreen`
    * `navBarHidden`
    * `modal`
    * `windowSoftInputMode`

    ***Starting from Titanium 3.2.0*** in Android, all the windows are heavyweight. If you still want
    the old behavior, you can enable the `ti.android.useLegacyWindow` property in the `tiapp.xml`:

        <property name="ti.android.useLegacyWindow" type="bool">true</property>

    A heavyweight window is always created when you open a new window from inside a 
    [TabGroup](Titanium.UI.TabGroup).

    #### Heavyweight Window Transitions in Android

    As explained above, heavyweight windows are their own Android Activity. The only way
    to animate the opening or closing of an Activity in Android is to apply an animation _resource_
    to it.  Passing a <Titanium.UI.Animation> object as a parameter to <Titanium.UI.Window.open>
    or <Titanium.UI.Window.close> will have no effect if the window being opened/closed is heavyweight
    and thus opens/closes its own Activity.

    Instead, in the parameter dictionary you pass to <Titanium.UI.Window.open> or <Titanium.UI.Window.close>,
    you should set the `activityEnterAnimation` and `activityExitAnimation` keys to
    animation resources. `activityEnterAnimation` should be set to the animation you want to run
    on the incoming activity, while `activityExitAnimation` should be set to the animation you
    want to run on the outgoing activity that you are leaving.

    Animation resources are available through the `R` object. Use either <Titanium.Android.R> for
    built-in resources or <Titanium.App.Android.R> for resources that you package in your application.

    As an example, you may wish for the window that you are opening to fade in while the window
    you are leaving should fade out:

        var win2 = Ti.UI.createWindow({
            fullscreen: false // Makes it heavyweight before Titanium 3.2.0
        });

        win2.open({
            activityEnterAnimation: Ti.Android.R.anim.fade_in,
            activityExitAnimation: Ti.Android.R.anim.fade_out
        });

    See the official Android [R.anim](http://developer.android.com/reference/android/R.anim.html) documentation
    for information about built-in animations.

    For information on creating your own animation resource XML files, see "[View Animation](http://developer.android.com/guide/topics/resources/animation-resource.html#View)"
    in Android's Resources documentation. After creating an animation resource file, you can place it under
    `platform/android/res/anim` in your Titanium project folder and it will be packaged in your app's APK
    and then available via <Titanium.App.Android.R>.

    #### Android "root" Windows

    In Android, you may wish to specify that a window which you create (such as the first
    window) should be considered the root window and that the application should exit when
    the back button is pressed from that window.  This is particularly useful if your application
    is not using a Tab Group and therefore the splash screen window is appearing whenever you
    press the back button from your lowest window on the stack.

    To indicate that a particular window should cause an application to exit when the back
    button is pressed, pass `exitOnClose: true` as one of the creation arguments, as shown here:

        var win = Titanium.UI.createWindow({
          title: 'My Root Window',
          exitOnClose: true
        });


examples:
  - title: Full Screen Window example
    example: |
        Create a fullscreen window with a red background.

            var window = Titanium.UI.createWindow({
               backgroundColor:'red'
            });
            window.open({fullscreen:true});

  - title: Alloy XML Markup
    example: |
        Previous example as an Alloy view.

            <Alloy>
                <Window id="win" backgroundColor="red" fullscreen="true" />
            </Alloy>

---
name: openWindowParams
summary: Dictionary of options for the <Titanium.UI.Window.open> method.
since: 2.0.0
platforms: [android, iphone, ipad]

properties:

  - name: animated
    summary: |
        Determines whether to use an animated effect when the window is shown.
    description: |
        On Android, this property supports animated transitions on heavyweight windows
        except for modal windows (`modal:true`).  See "Android Heavyweight and Lightweight
        Windows" in the main description of Titanium.UI.Window for more information. The
        transitions are on by default, but you can disable this behavior by setting this value
        to `false`.

        On iOS, only use this property to disable animated transitions on modal windows. 
        This property has unintended side effects on non-modal windows if it is defined. 
    type: Boolean
    default: true

  - name: bottom
    summary: Window's bottom position, in platform-specific units.
    description: |
        On Android, this property only works with lightweight windows.
        See "Android Heavyweight and Lightweight Windows" in the main description
        of Titanium.UI.Window for more information.
    type: [Number,String]
    default: 0

  - name: fullscreen
    summary: Determines if the window is fullscreen.
    type: Boolean
    default: false

  - name: height
    summary: Window's height, in platform-specific units.
    description: |
        On Android, before Titanium 3.2.0, this property only works with lightweight windows.
        See "Android Heavyweight and Lightweight Windows" in the main description 
        of Titanium.UI.Window for more information.
    type: [Number,String]

  - name: left
    summary: Window's left position, in platform-specific units.
    description: |
        On Android, this property only works with lightweight windows.
        See "Android Heavyweight and Lightweight Windows" in the main description 
        of Titanium.UI.Window for more information.
    type: [Number,String]
    default: 0

  - name: modal
    summary: Determines whether to open the window modal in front of other windows.
    type: Boolean
    default: false
    
  - name: modalStyle
    summary: Presentation style of this modal window.
    description: |
        One of the modal window presentation style constants 
        <Titanium.UI.iPhone.MODAL_PRESENTATION_CURRENT_CONTEXT>, 
        <Titanium.UI.iPhone.MODAL_PRESENTATION_FORMSHEET>, 
        <Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN>, 
        or <Titanium.UI.iPhone.MODAL_PRESENTATION_PAGESHEET>.
    platforms: [iphone, ipad]
    type: Number
    default: <Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN>

  - name: modalTransitionStyle
    summary: Transition style of this modal window.
    description: |
        One of the modal window transition style constants
        <Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_COVER_VERTICAL>,
        <Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_CROSS_DISSOLVE>,
        <Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL>,
        or <Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_PARTIAL_CURL>.
    platforms: [iphone, ipad]
    type: Number
    default: <Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_COVER_VERTICAL>

  - name: navBarHidden
    summary: For modal windows, hides the nav bar (`true`) or shows the nav bar (`false`).
    description: |
        On iOS, beginning with **Release 3.1.3**, this is no longer a valid parameter passed to the [Window.open](Titanium.UI.Window.open) method.
    type: Boolean
    default: false

  - name: right
    summary: Window's right position, in platform-specific units.
    description: |
        On Android, this property only works with lightweight windows.
        See "Android Heavyweight and Lightweight Windows" in the main description 
        of Titanium.UI.Window for more information.
    type: [Number,String]
    default: 0

  - name: top
    summary: Window's top position, in platform-specific units.
    description: |
        On Android, this property only works with lightweight windows.
        See "Android Heavyweight and Lightweight Windows" in the main description 
        of Titanium.UI.Window for more information.
    type: [Number,String]
    default: 0

  - name: transition
    summary: Transition style of this non-modal window.
    description: |
        One of the animation style constants 
        <Titanium.UI.iPhone.AnimationStyle.CURL_DOWN>,
        <Titanium.UI.iPhone.AnimationStyle.CURL_UP>,
        <Titanium.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT>,
        <Titanium.UI.iPhone.AnimationStyle.FLIP_FROM_RIGHT>,
        or <Titanium.UI.iPhone.AnimationStyle.NONE>. 
    platforms: [iphone, ipad]
    type: Number
    default: <Titanium.UI.iPhone.AnimationStyle.NONE>

  - name: width
    summary: Window's width, in platform-specific units.
    description: |
        On Android, before Titanium 3.2.0, this property only works with lightweight windows.
        See "Android Heavyweight and Lightweight Windows" in the main description 
        of Titanium.UI.Window for more information.
    type: [Number,String]

  - name: activityEnterAnimation
    summary: Animation resource to run on the activity (heavyweight window) being opened.
    description: |
      This value will be ignored if <openWindowParams.animated> is set to false.
      See "Heavyweight Window Transitions in Android" in the main description of Titanium.UI.Window
      for more information.
    type: Number
    platforms: [android]
    since: "3.1.0"
    examples:
      - title: Sliding in a new Window
        example: |
                var win2 = Ti.UI.createWindow({fullscreen:false});
                win2.open({
                    activityEnterAnimation: Ti.Android.R.anim.slide_in_left,
                    activityExitAnimation: Ti.Android.R.anim.slide_out_right
                });

  - name: activityExitAnimation
    summary: Animation resource to run on the activity that is being put in background
        as a heavyweight window is being opened above it.
    description: |
      This value will be ignored if <openWindowParams.animated> is set to false.
      See "Heavyweight Window Transitions in Android" in the main description of Titanium.UI.Window
      for more information.
    type: Number
    platforms: [android]
    since: "3.1.0"

---
name: windowToolbarParam
summary: Dictionary of options for the <Titanium.UI.Window.setToolbar> method.
since: 3.1.3
platforms: [iphone,ipad]

properties:

  - name: translucent
    summary: Defines if the toolbar is translucent.
    type: Boolean
    default: true on iOS 7 and above, false otherwise.

  - name: animated
    summary: Defines if the toolbar appearance is animated.
    type: Boolean
    default: true if the window has toolbar items, false otherwise.

  - name: barColor
    summary: Background color for the toolbar, as a color name or hex triplet.
    type: String

  - name: tintColor
    summary: The tintColor to apply to the tool bar. Applicable on iOS 7 and above.
    type: String

---
name: closeWindowParams
summary: Dictionary of options for the <Titanium.UI.Window.close> method.
since: 3.2.0
platforms: [android]

properties:

  - name: animated
    summary: |
        Determines whether to use an animated effect when the window is closed.
    description: |
        This property supports animated transitions on heavyweight windows
        except for modal windows (`modal:true`).  See "Android Heavyweight and Lightweight
        Windows" in the main description of Titanium.UI.Window for more information. The
        transitions are on by default, but you can disable this behavior by setting this value
        to `false`.
    type: Boolean
    default: true

  - name: activityEnterAnimation
    summary: Animation resource to use for the incoming activity.
    description: |
      This value will be ignored if <closeWindowParams.animated> is set to false.
      See "Heavyweight Window Transitions in Android" in the main description of Titanium.UI.Window
      for more information.
    type: Number

  - name: activityExitAnimation
    summary: Animation resource to use for the outgoing activity (heavyweight window).
    description: |
      This value will be ignored if <closeWindowParams.animated> is set to false.
      See "Heavyweight Window Transitions in Android" in the main description of Titanium.UI.Window
      for more information.
    type: Number
    examples:
      - title: Fading out a Window
        example: |
                win2.close({
                    activityEnterAnimation: Ti.Android.R.anim.fade_in,
                    activityExitAnimation: Ti.Android.R.anim.fade_out
                });

---
name: titleAttributesParams
summary: Dictionary of options for the <Titanium.UI.Window.titleAttributes> property.
since: 3.2.0
platforms: [iphone, ipad]
examples:
  - title: Simple Example
    example: |

        var win = Titanium.UI.createWindow({
            title: 'Title',
            barColor: 'yellow',
            titleAttributes:  {
                color:'blue',
                font: {fontFamily:'Snell Roundhand', fontSize:36},
                shadow:{color:'gray', offset:{width:1,height:1}}
            }
        });
        var nav = Titanium.UI.iOS.createNavigationWindow({window: win});
        nav.open();

properties:

  - name: color
    summary: Color of the window title, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: String

  - name: font
    summary: Font to use for the window title.
    type: Font

  - name: shadow
    summary: Shadow color and offset for the window title.
    type: shadowDict

---
name: shadowDict
summary: Dictionary describing the shadow effect for text.
properties:
  - name: blurRadius
    summary: Specifies the blur radius of the shadow.
    description: |
        Supported on iOS 7 and later.

        `0` means no blur.
    type: Number

  - name: color
    summary: Color name or hex triplet specifying the color of the shadow.
    type: String

  - name: offset
    summary: |
        Dictionary with the properties `width` and `height` used as the horizontal
        and vertical offset of the shadow, respectively.
    type: Dictionary
