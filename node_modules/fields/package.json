{
  "name": "fields",
  "description": "Creates fields to prompt for input at the command line",
  "main": "./lib/index",
  "author": {
    "name": "Chris Barber"
  },
  "version": "0.1.12",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/cb1kenobi/fields/raw/master/LICENSE"
    }
  ],
  "engines": {
    "node": ">=0.8.0"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "colors": "~0.6.2",
    "keypress": "~0.1.0",
    "sprintf": "~0.1.2"
  },
  "homepage": "https://github.com/cb1kenobi/fields",
  "bugs": {
    "url": "https://github.com/cb1kenobi/fields/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cb1kenobi/fields.git"
  },
  "readme": "# Fields\n\nFields is a small library that provides a handful of useful input fields for use\nat the command line. Each field type supports both an object-oriented and\nchainable method-based API.\n\n[![NPM](https://nodei.co/npm/fields.png?downloads=true&stars=true)](https://nodei.co/npm/fields/)\n\n# Installation\n\n    npm install fields\n\n# Features\n\n* Tab completion for File and Select fields\n* Password masks\n* Titles, descriptions, prompt labels\n* Custom renderers and validation handler support\n* Fully customizable appearance\n* Command history\n* Batch field prompting including flow control\n* Support for select field option accelerators\n\n# Field Types\n\n## Text\n\nSimple prompt for capturing a string of text. Also supports password masks and history.\n\n![Text field](https://www.evernote.com/shard/s75/sh/0ff002b2-7b15-4442-8a3a-afb806dac932/9a9d355870fb90099c042dac4f5cf12d/deep/0/Screenshot%207/18/13%2010:02%20PM.jpg)\n\n## File\n\nPrompt for a specific file or directory. Supports tab completion.\n\n![File field](https://www.evernote.com/shard/s75/sh/f75b3e0a-ee8b-46bc-b0f7-1b93339de3ad/f53665b083f0a3cbcab0358a59a44ad1/deep/0/Screenshot%207/18/13%209:58%20PM.jpg)\n\n## Select list\n\nDisplays a list of options which a single item can be selected. Supports tab\ncompletion, numbered options, and setting the display method.\n\n![Select field](https://www.evernote.com/shard/s75/sh/872fdef6-b11a-4426-a6e9-ef07bd80a98e/801ffb85cd9d9247bee6bf33dcb0a940/deep/0/Screenshot%207/18/13%2010:09%20PM.jpg)\n\n## Set\n\nGroup multiple fields into a single \"set\" and prompts for each field. Supports\nskipping fields in the set.\n\n![Set field](https://www.evernote.com/shard/s75/sh/c1f725c2-c261-4a43-93ca-156899c18371/92acf90edb7a7a2775322d6c9595d506/deep/0/Screenshot%207/18/13%2010:12%20PM.jpg)\n\n# Getting Started\n\nStart by requiring the fields module:\n\n```js\nvar fields = require('fields');\n```\n\n# Global Settings\n\n## fields.setup(opts)\n\nSets default settings.\n\n* `{object}` `opts` Contains settings that will override the default values\n\nExample:\n\n```js\nfields.setup({\n\tcolors: false\n});\n```\n\n### Available Default Settings\n\n`{boolean}` `colors`\n\n* Enables colors.\n* Scope: applies to all field types\n* Default: `true`\n\n`{string}` `separator`\n\n* The separator between the promptLabel and the input.\n* Scope: applies to all field types\n* Default: `'> '`\n\n`{string}` `defaultLeft`\n\n* When a default value is set, this string is printed to the left of the\n  default value.\n* Scope: applies to `File`, `Select`, and `Text`\n* Default: `'['`\n\n`{string}` `defaultRight`\n\n* When a default value is set, this string is printed to the right of the\n  default value.\n* Scope: applies to `File`, `Select`, and `Text`\n* Default: `']'`\n\n`{string}` `promptValuesLeft`\n\n* When displaying a list of values in the prompt, this string is printed to\n  the left of the list of values.\n* Scope: applies to `Select`, but will work with `File` and `Text`\n* Default: `'('`\n\n`{string}` `promptValuesSeparator`\n\n* When displaying a list of values in the prompt, this string is printed\n  between each value.\n* Scope: applies to `Select`, but will work with `File` and `Text`\n* Default: `'|'`\n\n`{string}` `promptValuesRight`\n\n* When displaying a list of values in the prompt, this string is printed to\n  the right of the list of values.\n* Scope: applies to `Select`, but will work with `File` and `Text`\n* Default: `')'`\n\n`{string}` `mask`\n\n* The character to be rendered when prompting for a password.\n* Scope: applies to `Text` when `password` = `true`\n* Default: `'*'`\n\n`{string}` `fieldSeparator`\n\n* The string to be displayed between fields in a `Set`.\n* Scope: applies to `Set`\n* Default: `'\\n'`\n\n`{object}` `style`\n\n* An object containing one or more style classes where the value is a color\n  or style or an array containg a color and one or more styles. Values may\n  also be `null`.\n* Properties:\n\t* `default` (default value: `'cyan'`)\n\t* `title` (default value: `'magenta'`)\n\t* `promptLabel` (default value: `'bold'`)\n\t* `promptValues` (default value: `null`)\n\t* `desc` (default value: `'grey'`)\n\t* `mask` (default value: `'magenta'`)\n\t* `group` (default value: `'grey'`)\n\t* `error` (default value: `'red'`)\n\t* `suggestion` (default value: `'cyan'`)\n\t* `option` (default value: `'cyan'`)\n\t* `accelerator` (default value `['underline', 'bold', 'cyan']`)\n* Colors:\n\t* `'red'`\n\t* `'yellow'`\n\t* `'green'`\n\t* `'blue'`\n\t* `'cyan'`\n\t* `'magenta'`\n\t* `'black'`\n\t* `'grey'`\n\t* `'white'`\n* Styles:\n\t* `'bold'`\n\t* `'underline'`\n\t* `'italic'`\n\t* `'inverse'`\n\t* NOTE: some styles, such as `italic`, may not work in all environments\n\t  and styles such as `white` or `black` may conflict with the background\n\t  color of the user's terminal.\n\n`{boolean}` `repromptOnError`\n\n* If the field has a `validate()` function, validation fails, and\n  `repromptOnError` is `true` (default), then it will reprompt for the value\n  again. If `repromptOnError` is false, then it will stop prompting. This is\n  useful when you have a `Set` and you need to prompt for multiple values, then\n  possibly return to a previous field if validation fails. For example, you\n  prompt for a username and password, but authentication fails, you may want to\n  re-prompt for the username again.\n* Scope: applies to `File`, `Select`, and `Text`\n* Default: `true`\n\n# fields.Text(opts)\n\nCreates a new Text field.\n\n* `{object}` `opts` Text field options.\n\n\t* Text field specific options:\n\n\t\t* `{object}` `opts.formatters` An object of specific formatting functions.\n\n\t\t\t* `{function}` `opts.formatters.desc(string)`\n\n\t\t\t  Custom field description formatter.\n\n\t\t\t* `{function}` `opts.formatters.error(Error|string)`\n\n\t\t\t  Error message formatter.\n\n\t\t\t* `{function}` `opts.formatters.title(string)`\n\n\t\t\t  Custom field title formatter.\n\n\t* Standard options:\n\n\t\t* `{boolean}` `opts.colors`\n\n\t\t  Enables text being rendered with color. Default value is `true`.\n\n\t\t* `{string}` `opts.default`\n\n\t\t  The default value. Returned when the user enters an empty value at the\n\t\t  prompt.\n\n\t\t* `{string}` `opts.defaultLeft`\n\n\t\t  A string displayed before the default value in the prompt. Default value is `'['`.\n\n\t\t* `{string}` `opts.defaultRight`\n\n\t\t  A string displayed after the default value in the prompt. Default value is `']'`.\n\n\t\t* `{string}` `opts.desc`\n\n\t\t  The description to print below the title, but above the prompt.\n\n\t\t* `{boolean}` `opts.hidden`\n\n\t\t  When true, the value is still prompted, but it's not apart of the results.\n\t\t  Useful for decisions in a `Set`.\n\n\t\t* `{string}` `opts.mask`\n\n\t\t  The character to be rendered when entering a password. The mask must be 1\n\t\t  character. Default value is `'*'`.\n\n\t\t* `{function}` `opts.next(err, value, callback)`\n\n\t\t  When this field is being prompted in a `Set`, the `next()` function is\n\t\t  called after prompting  and `validate()` has completed to tell the `Set`\n\t\t  which field to visit next.\n\n\t\t  If `validate()` fails and `repromptOnError` == `true`, then `next()` is not\n\t\t  called since the field will continue to re-prompt until `validate()` passes.\n\n\t\t  `next()` may return the name or index of the next field or call the supplied\n\t\t  `callback()` with the name or index of the next field to visit.\n\n\t\t  If `next()` returns nothing or `undefined`, it will assume you are planning\n\t\t  on calling the supplied `callback` function.\n\n\t\t  If `next()` returns `null`, then the `Set` will proceed to the next field.\n\n\t\t  If `next()` returns `false`, then it will tell the `Set` to stop prompting.\n\n\t\t* `{boolean}` `opts.password`\n\n\t\t  Treat input as a secret.\n\n\t\t* `{string}` `opts.promptLabel`\n\n\t\t  The label to display before prompt.\n\n\t\t* `{array<string>}` `opts.promptValues`\n\n\t\t  The values to print between the `promptLabel` and the prompt input.\n\n\t\t* `{string}` `opts.promptValuesLeft`\n\n\t\t  A string displayed before the `promptValues`. Default value is `'('`.\n\n\t\t* `{string}` `opts.promptValuesRight`\n\n\t\t  A string displayed after the `promptValues`. Default value is `')'`.\n\n\t\t* `{string}` `opts.promptValuesSeparator`\n\n\t\t  A string used to separate the prompt values. Default value is `'|'`.\n\n\t\t* `{boolean}` `opts.repromptOnError`\n\n\t\t  If the field has a `validate()` function, validation fails, and\n\t\t  `repromptOnError` is `true` (default), then it will reprompt for the value\n\t\t  again.\n\n\t\t  If `repromptOnError` is false, then it will stop prompting. This is useful\n\t\t  when you have a `Set` and you need to prompt for multiple values, then\n\t\t  possibly return to a previous field if validation fails.\n\n\t\t  For example, you prompt for a username and password, but authentication\n\t\t  fails, you may want to re-prompt for the username again.\n\n\t\t  Default value is `true`.\n\n\t\t* `{string}` `opts.separator`\n\n\t\t  A string displayed after the prompt, but before the prompt input. Default\n\t\t  value is `': '`.\n\n\t\t* `{string}` `opts.title`\n\n\t\t  The title to print above the prompt.\n\n\t\t* `{boolean}` `opts.trim`\n\n\t\t  Trim the input after entered. Default value is `true`.\n\n\t\t* `{function}` `opts.validate(value, callback(err, value), field)`\n\n\t\t  A function to be called when a value is submitted. The `validate()`\n\t\t  function is passed in the `value` and a `callback`.\n\n\t\t  If the `validate()` function returns `true`, validation passes.\n\n\t\t  If it returns `false`, validation fails.\n\n\t\t  If it returns `undefined`, then it will wait for the `callback()` parameter\n\t\t  to be called. The `callback(err, value)` function MUST pass the `value`\n\t\t  back. This allows the `callback()` to not only validate, but modify the\n\t\t  value.\n\nReturns a `Text` field instance with the following properties:\n\n* `{function}` `prompt(callback)`\n\n\t* `{function}` `callback(err, value)`\n\n\t  A function that is called when prompting has completed.\n\n* `{Set}` `set`\n\n  If the field is apart of a `Set`, then this property will reference the set,\n  otherwise `set` will be `null`.\n\nEvents:\n\n* `pre-prompt`\n\n  Emitted before the current field is prompted.\n\n  * `{object}` `field` The current field\n\n* `post-prompt`\n\n  Emitted after the current field has been prompted.\n\n  * `{object}` `field` The current field\n  * `{anything}` `err` The error if something failed\n  * `{string}` `result` The result after the prompting\n\nObject-oriented example:\n\n```js\nvar nameField = new fields.Text({\n\ttitle: 'We would like to know your name',\n\tpromptLabel: 'What is your name?'\n});\n\nnameField.prompt(function (err, value) {\n\tif (err) {\n\t\tconsole.error('There was an error!\\n' + err);\n\t} else {\n\t\tconsole.log('You entered ' + value);\n\t}\n});\n```\n\nChainable function example:\n\n```\nvar ageField = fields.text({\n\ttitle: 'What is your age?',\n\tdescription: 'We promise not to tell anyone',\n\tvalidate: function (value) {\n\t\treturn /^\\d+$/.test(value);\n\t}\n});\n\nageField.prompt(function (err, value) {\n\tif (err) {\n\t\tconsole.error('There was an error!\\n' + err);\n\t} else {\n\t\tconsole.log('You entered ' + value);\n\t}\n});\n```\n\nCallback validation example:\n\n```\nfields.text({\n\ttitle: 'What is your favorite food?'\n\tvalidate: function (value, callback) {\n\t\tcallback(null, value.toLowerCase());\n\t}\n}).prompt(function (err, value) {\n\tif (err) {\n\t\tconsole.error('There was an error!\\n' + err);\n\t} else {\n\t\tconsole.log('You entered ' + value);\n\t}\n});\n```\n\n# fields.File(opts)\n\nCreates a new File field.\n\n* `{object}` `opts` File field options.\n\n\t* File field specific options:\n\n\t\t* `{object}` `opts.formatters`\n\n\t\t  An object of specific formatting functions.\n\n\t\t\t* `{function}` `opts.formatters.desc(string)`\n\n\t\t\t  Custom field description formatter.\n\n\t\t\t* `{function}` `opts.formatters.error(Error|string)`\n\n\t\t\t  Error message formatter.\n\n\t\t\t* `{function}` `opts.formatters.title(string)`\n\n\t\t\t  Custom field title formatter.\n\n\t\t* `{regexp}` `opts.ignoreDirs`\n\n\t\t  A regular expression of directory names to ignore when autocompleting.\n\n\t\t* `{regexp}` `opts.ignoreFiles`\n\n\t\t  A regular expression of filenames to ignore when autocompleting.\n\n\t\t* `{boolean}` `opts.showHidden`\n\n\t\t  If true, will display files beginning with a '.' in the autocomplete\n\t\t  results. Defaults to `true`.\n\n\t* Autocomplete options:\n\n\t\t* `{boolean}` `opts.complete`\n\n\t\t  If true, will autocomplete the current entry when the <tab> key is entered.\n\t\t  Default value is `false`.\n\n\t* Standard options:\n\n\t\t* `{boolean}` `opts.colors`\n\n\t\t  Enables text being rendered with color. Default value is `true`.\n\n\t\t* `{string}` `opts.default`\n\n\t\t  The default value. Returned when the user enters an empty value at the prompt.\n\n\t\t* `{string}` `opts.defaultLeft`\n\n\t\t  A string displayed before the default value in the prompt. Default value is `'['`.\n\n\t\t* `{string}` `opts.defaultRight`\n\n\t\t  A string displayed after the default value in the prompt. Default value is `']'`.\n\n\t\t* `{string}` `opts.desc`\n\n\t\t  The description to print below the title, but above the prompt.\n\n\t\t* `{boolean}` `opts.hidden`\n\n\t\t  When true, the value is still prompted, but it's not apart of the results.\n\t\t  Useful for decisions in a `Set`.\n\n\t\t* `{string}` `opts.mask`\n\n\t\t  The character to be rendered when entering a password. The mask must be 1\n\t\t  character. Default value is `'*'`.\n\n\t\t* `{function}` `opts.next(err, value, callback)`\n\n\t\t  When this field is being prompted in a `Set`, the `next()` function is\n\t\t  called after prompting  and `validate()` has completed to tell the `Set`\n\t\t  which field to visit next.\n\n\t\t  If `validate()` fails and `repromptOnError` == `true`, then `next()` is not\n\t\t  called since the field will continue to re-prompt until `validate()` passes.\n\n\t\t  `next()` may return the name or index of the next field or call the supplied\n\t\t  `callback()` with the name or index of the next field to visit.\n\n\t\t  If `next()` returns nothing or `undefined`, it will assume you are planning\n\t\t  on calling the supplied `callback` function.\n\n\t\t  If `next()` returns `null`, then the `Set` will proceed to the next field.\n\n\t\t  If `next()` returns `false`, then it will tell the `Set` to stop prompting.\n\n\t\t* `{boolean}` `opts.password`\n\n\t\t  Treat input as a secret.\n\n\t\t* `{string}` `opts.promptLabel`\n\n\t\t  The label to display before prompt.\n\n\t\t* `{array<string>}` `opts.promptValues`\n\n\t\t  The values to print between the `promptLabel` and the prompt input.\n\n\t\t* `{string}` `opts.promptValuesLeft`\n\n\t\t  A string displayed before the `promptValues`. Default value is `'('`.\n\n\t\t* `{string}` `opts.promptValuesRight`\n\n\t\t  A string displayed after the `promptValues`. Default value is `')'`.\n\n\t\t* `{string}` `opts.promptValuesSeparator`\n\n\t\t  A string used to separate the prompt values. Default value is `'|'`.\n\n\t\t* `{boolean}` `opts.repromptOnError`\n\n\t\t  If the field has a `validate()` function, validation fails, and\n\t\t  `repromptOnError` is `true` (default), then it will reprompt for the value\n\t\t  again.\n\n\t\t  If `repromptOnError` is false, then it will stop prompting. This is useful\n\t\t  when you have a `Set` and you need to prompt for multiple values, then\n\t\t  possibly return to a previous field if validation fails.\n\n\t\t  For example, you prompt for a username and password, but authentication\n\t\t  fails, you may want to re-prompt for the username again.\n\n\t\t  Default value is `true`.\n\n\t\t* `{string}` `opts.separator`\n\n\t\t  A string displayed after the prompt, but before the prompt input. Default\n\t\t  value is `': '`.\n\n\t\t* `{string}` `opts.title`\n\n\t\t  The title to print above the prompt.\n\n\t\t* `{boolean}` `opts.trim`\n\n\t\t  Trim the input after entered. Default value is `true`.\n\n\t\t* `{function}` `opts.validate(value, callback(err, value), field)`\n\n\t\t  A function to be called when a value is submitted. The `validate()`\n\t\t  function is passed in the `value` and a `callback`.\n\n\t\t  If the `validate()` function returns `true`, validation passes.\n\n\t\t  If it returns `false`, validation fails.\n\n\t\t  If it returns `undefined`, then it will wait for the `callback()` parameter\n\t\t  to be called. The `callback(err, value)` function MUST pass the `value`\n\t\t  back. This allows the `callback()` to not only validate, but modify the\n\t\t  value.\n\nReturns a `File` field instance with the following properties:\n\n* `{function}` `prompt(callback)`\n\n\t* `{function}` `callback(err, value)`\n\n\t  A function that is called when prompting has completed.\n\n* `{Set}` `set`\n\n  If the field is apart of a `Set`, then this property will reference the set,\n  otherwise `set` will be `null`.\n\nEvents:\n\n* `pre-prompt`\n\n  Emitted before the current field is prompted.\n\n  * `{object}` `field` The current field\n\n* `post-prompt`\n\n  Emitted after the current field has been prompted.\n\n  * `{object}` `field` The current field\n  * `{anything}` `err` The error if something failed\n  * `{string}` `result` The result after the prompting\n\nExample:\n\n```\nfields.file({\n\ttitle: 'Enter the project directory',\n\tdesc: 'Any directory will do',\n\tcomplete: true,\n\tshowHidden: false,\n\tignoreDirs: /^(\\.svn|\\.git|\\.hg)$'/,\n\tignoreFiles: /^(\\.gitignore|\\.npmignore|\\.cvsignore|\\.DS_store|\\._\\*)$/\n}).prompt(function (err, value) {\n\tif (err) {\n\t\tconsole.error('There was an error!\\n' + err);\n\t} else {\n\t\tconsole.log('You entered ' + value);\n\t}\n});\n```\n\n# fields.Select(opts)\n\nCreates a new Select field.\n\n* `{object}` `opts` Select field options.\n\n\t* Select field specific options:\n\n\t\t* `{boolean}` `opts.autoSelectOne`\n\n\t\t  If `true` and the `options` array contains a single entry, then it will skip\n\t\t  the prompting and immediately call the callback. Default value is `false`.\n\n\t\t* `{string}` `opts.display`\n\n\t\t  Controls how autocomplete results are\n\t\t  printed. Possible values are `'grid'`, `'list'`, and `'prompt'`.\n\t\t  Default value is `'list'`.\n\n\t\t* `{object}` `opts.formatters`\n\n\t\t  An object of specific formatting functions.\n\n\t\t\t* `{function}` `opts.formatters.desc(string)`\n\n\t\t\t  Custom field description formatter.\n\n\t\t\t* `{function}` `opts.formatters.error(Error|string)`\n\n\t\t\t  Error message formatter.\n\n\t\t\t* `{function}` `opts.formatters.option(string)`\n\n\t\t\t  Custom select list option formatter.\n\n\t\t\t* `{function}` `opts.formatters.title(string)`\n\n\t\t\t  Custom field title formatter.\n\n\t\t* `{string}` `opts.margin`\n\n\t\t  A string to print in the left margin for each item being rendered. Default\n\t\t  value is two spaces.\n\n\t\t* `{boolean}` `opts.numbered`\n\n\t\t  If `true`, prints numbers for each list option in which the user can select\n\t\t  the item by entering the number. Default value is `false`.\n\n\t\t* `{array<object>}` `opts.options`\n\n\t\t  An array of options to display. Each option should have a label and a value.\n\t\t  You can name these properties whatever you'd like as long as you specify\n\t\t  their name using the `optionLabel` and `optionValue` options.\n\n\t\t* `{string}` `opts.optionLabel`\n\n\t\t  The name of the key in each option's object that contains the label to print\n\t\t  for the option. Default value is `'label'`.\n\n\t\t* `{string}` `opts.optionValue`\n\n\t\t  The name of the key in each option's object that contains the value that is\n\t\t  submitted if the option is selected. Default value is `'value'`.\n\n\t\t* `{boolean}` `opts.relistOnError`\n\n\t\t  If `true`, after a invalid option is selected, then it will re-display all\n\t\t  available options. Default value is `false`.\n\n\t\t* `{object}` `opts.i18nStrings`\n\n\t\t  An object containing internationalized strings. There currently are only two\n\t\t  strings that would need to be translated:\n\n\t\t\t* `'Invalid selection \"%s\"'`\n\n\t\t\t* `'Please select a valid option'`\n\n\t\t* `{boolean}` `opts.suggest`\n\n\t\t  If `true`, it will display a list of possible suggestions that closest match\n\t\t  the submitted value. This uses the levenshtein algorithm to compare the\n\t\t  value with possible values. Default value is `false`.\n\n\t\t* `{number}` `opts.suggestThreshold`\n\n\t\t  A threshold for the levenshtein algorithm. Default value is `3`. You may\n\t\t  want to use `2` if matching short strings.\n\n\t\t* `{boolean}` `opts.zeroSkip`\n\n\t\t  If `true` and `numbered` is `true`, then allows the user to enter zero to\n\t\t  select nothing. Default value is `false`.\n\n\t* Autocomplete options:\n\n\t\t* `{boolean}` `opts.complete`\n\n\t\t  If true, will autocomplete the current entry when the <tab> key is entered.\n\t\t  Default value is `false`.\n\n\t\t* `{boolean}` `opts.completeIgnoreCase`\n\n\t\t  If true, will ignore case when finding matches. Default value is `false`.\n\n\t* Standard options:\n\n\t\t* `{boolean}` `opts.colors`\n\n\t\t  Enables text being rendered with color. Default value is `true`.\n\n\t\t* `{string}` `opts.default`\n\n\t\t  The default value. Returned when the user enters an empty value at the\n\t\t  prompt.\n\n\t\t* `{string}` `opts.defaultLeft`\n\n\t\t  A string displayed before the default value in the prompt. Default value\n\t\t  is `'['`.\n\n\t\t* `{string}` `opts.defaultRight`\n\n\t\t  A string displayed after the default value in the prompt. Default value\n\t\t  is `']'`.\n\n\t\t* `{string}` `opts.desc`\n\n\t\t  The description to print below the title, but above the prompt.\n\n\t\t* `{boolean}` `opts.hidden`\n\n\t\t  When true, the value is still prompted, but it's not apart of the results.\n\t\t  Useful for decisions in a `Set`.\n\n\t\t* `{string}` `opts.mask`\n\n\t\t  The character to be rendered when entering a password. The mask must be 1\n\t\t  character. Default value is `'*'`.\n\n\t\t* `{function}` `opts.next(err, value, callback)`\n\n\t\t  When this field is being prompted in a `Set`, the `next()` function is\n\t\t  called after prompting  and `validate()` has completed to tell the `Set`\n\t\t  which field to visit next.\n\n\t\t  If `validate()` fails and `repromptOnError` == `true`, then `next()` is not\n\t\t  called since the field will continue to re-prompt until `validate()` passes.\n\n\t\t  `next()` may return the name or index of the next field or call the supplied\n\t\t  `callback()` with the name or index of the next field to visit.\n\n\t\t  If `next()` returns nothing or `undefined`, it will assume you are planning\n\t\t  on calling the supplied `callback` function.\n\n\t\t  If `next()` returns `null`, then the `Set` will proceed to the next field.\n\n\t\t  If `next()` returns `false`, then it will tell the `Set` to stop prompting.\n\n\t\t* `{boolean}` `opts.password`\n\n\t\t  Treat input as a secret.\n\n\t\t* `{string}` `opts.promptLabel`\n\n\t\t  The label to display before prompt.\n\n\t\t* `{array<string>}` `opts.promptValues`\n\n\t\t  The values to print between the `promptLabel` and the prompt input.\n\n\t\t* `{string}` `opts.promptValuesLeft`\n\n\t\t  A string displayed before the `promptValues`. Default value is `'('`.\n\n\t\t* `{string}` `opts.promptValuesRight`\n\n\t\t  A string displayed after the `promptValues`. Default value is `')'`.\n\n\t\t* `{string}` `opts.promptValuesSeparator`\n\n\t\t  A string used to separate the prompt values. Default value is `'|'`.\n\n\t\t* `{boolean}` `opts.repromptOnError`\n\n\t\t  If the field has a `validate()` function, validation fails, and\n\t\t  `repromptOnError` is `true` (default), then it will reprompt for the value\n\t\t  again.\n\n\t\t  If `repromptOnError` is false, then it will stop prompting. This is useful\n\t\t  when you have a `Set` and you need to prompt for multiple values, then\n\t\t  possibly return to a previous field if validation fails.\n\n\t\t  For example, you prompt for a username and password, but authentication\n\t\t  fails, you may want to re-prompt for the username again.\n\n\t\t  Default value is `true`.\n\n\t\t* `{string}` `opts.separator`\n\n\t\t  A string displayed after the prompt, but before the prompt input. Default\n\t\t  value is `': '`.\n\n\t\t* `{string}` `opts.title`\n\n\t\t  The title to print above the prompt.\n\n\t\t* `{boolean}` `opts.trim`\n\n\t\t  Trim the input after entered. Default value is `true`.\n\n\t\t* `{function}` `opts.validate(value, callback(err, value), field)`\n\n\t\t  A function to be called when a value is submitted. The `validate()`\n\t\t  function is passed in the `value` and a `callback`.\n\n\t\t  If the `validate()` function returns `true`, validation passes.\n\n\t\t  If it returns `false`, validation fails.\n\n\t\t  If it returns `undefined`, then it will wait for the `callback()` parameter\n\t\t  to be called. The `callback(err, value)` function MUST pass the `value`\n\t\t  back. This allows the `callback()` to not only validate, but modify the\n\t\t  value.\n\nReturns a `Select` field instance with the following properties:\n\n* `{function}` `prompt(callback)`\n\n\t* `{function}` `callback(err, value)`\n\n\t  A function that is called when prompting has completed.\n\n* `{Set}` `set`\n\n  If the field is apart of a `Set`, then this property will reference the set,\n  otherwise `set` will be `null`.\n\nIf an option label contains double underscores that wrap a character like\n`some__t__hing`, then `t` will become an accelerator that automatically maps `t`\nwith `something`. Use the `accelerator` style to style it.\n\nEvents:\n\n* `pre-prompt`\n\n  Emitted before the current field is prompted.\n\n  * `{object}` `field` The current field\n\n* `post-prompt`\n\n  Emitted after the current field has been prompted.\n\n  * `{object}` `field` The current field\n  * `{anything}` `err` The error if something failed\n  * `{string}` `result` The result after the prompting\n\nSimple example:\n\n```\nvar list = new fields.Select({\n\ttitle: 'What is your favorite milkshake?',\n\toptions: [\n\t\t'__v__anilla',\n\t\t'stra__w__berry',\n\t\t'cho__c__olate'\n\t],\n\tcomplete: true,\n\tsuggest: true\n});\n\nlist.prompt(function (err, value) {\n\tif (err) {\n\t\tconsole.error('There was an error!\\n' + err);\n\t} else {\n\t\tconsole.log('Your favorite milkshake is ' + value + '. Yum!');\n\t}\n});\n```\n\nSlightly more complex example:\n\n```\nfields.select({\n\ttitle: 'Select a UUID by number or name',\n\tformatters: {\n\t\toption: function (opt, idx, num) {\n\t\t\treturn '    ' + num + opt.value.cyan + '  ' + opt.name;\n\t\t}\n\t},\n\tnumbered: true,\n\trelistOnError: true,\n\tcomplete: true,\n\tsuggest: true,\n\toptions: {\n\t\t'Available UUIDs:': [\n\t\t\t{ name: 'uuid 1', value: '43C5E7DE-F6BB-4AEF-98F0-0A33990EA280' },\n\t\t\t{ name: 'uuid 2', value: '4F562E96-C933-4367-B6BD-89CA7D6EE400' },\n\t\t\t{ name: 'uuid 3', value: '31D3AC10-99F4-43E1-997B-980E70EC706B' },\n\t\t\t{ name: 'uuid 4', value: 'E1512AE0-FEBB-43A2-9C9C-E1D2F4D6C51F' },\n\t\t\t{ name: 'uuid 5', value: 'F624D6BA-5FF3-4E48-B9F2-BC7DD1A8EA97' },\n\t\t\t{ name: 'uuid 6', value: '3C12C8D9-C05F-4834-BA7E-9C55CB8C9287' },\n\t\t\t{ name: 'uuid 7', value: 'BB91EDBF-2A97-4227-B5B2-5943BAB30304' },\n\t\t\t{ name: 'uuid 8', value: '204C6E4A-FA9C-48BB-9D84-709A10A690AB' },\n\t\t\t{ name: 'uuid 9', value: '05282F35-42BB-40F3-8C20-3EC1739AB414' },\n\t\t\t{ name: 'uuid 10', value: '5EC586D9-7E2B-4F55-834D-CD8199DD92B8' },\n\t\t\t{ name: 'uuid 11', value: 'A4BD1980-8C4B-4DBB-8FBE-5A52E36DFA63' },\n\t\t\t{ name: 'uuid 12', value: '99C49052-E280-48D3-B881-E8112B7DFCF1' },\n\t\t\t{ name: 'uuid 13', value: 'A057301B-B38D-40B6-A6A4-B582AE5EAABE' },\n\t\t\t{ name: 'uuid 14', value: 'D39B019B-3EF0-4BCA-A1E9-FC2F5063097F' },\n\t\t\t{ name: 'uuid 15', value: 'C9A11E0C-5FF4-4B55-890F-F7715194CAB3' },\n\t\t\t{ name: 'uuid 16', value: 'B1E31DD0-8968-4A32-B210-A0558302F65B' }\n\t\t]\n\t}\n}).prompt(function (err, value) {\n\tif (err) {\n\t\tconsole.error('There was an error!\\n' + err);\n\t} else {\n\t\tconsole.log('You selected ' + value);\n\t}\n});\n```\n\n# fields.Set(fields, opts)\n\nCreates a new field Set. Sets batch prompt several fields including other sets.\n\n* `{object|array}` `fields` An object or array of field instances to prompt for.\n\n* `{object}` `opts` Select field options.\n\n\t* `{string}` `opts.fieldSeparator`\n\n\t  A string to render between each field being prompted. Default value is `'\\n'`.\n\n\t* `{boolean}` `opts.stopOnError`\n\n\t  If `true` and a field's `validate()` fails, then the `Set` will stop\n\t  prompting, otherwise if `false`, it will continue to the next field. Default\n\t  value is `true`. You may want to set this `false` when using\n\t  `repromptOnError=false` (see `repromptOnError`).\n\nReturns a `Set` field instance with the following properties:\n\n* `{function}` `prompt(callback)`\n\n\t* `{function}` `callback(err, value)`\n\n\t  A function that is called when prompting has completed.\n\nEvents:\n\n* `pre-prompt`\n\n  Emitted before the current field is prompted.\n\n  * `{object}` `field` The current field\n\n* `post-prompt`\n\n  Emitted after the current field has been prompted.\n\n  * `{object}` `field` The current field\n  * `{anything}` `err` The error if something failed\n  * `{string}` `result` The result after the prompting\n\nObject-based example:\n\n```\nfields.set({\n\tsomething: fields.text({\n\t\tpromptLabel: 'Username',\n\t\tvalidate: function (value, callback) {\n\t\t\tcallback(!value.length && new Error('Please enter a username'), value);\n\t\t}\n\t}),\n\n\tchangePass: fields.select({\n\t\tpromptLabel: 'Change password?',\n\t\tdisplay: 'prompt',\n\t\toptions: [ 'yes', 'no' ],\n\t\tnext: function (value) {\n\t\t\tif (value == 'no') {\n\t\t\t\treturn 'favfood';\n\t\t\t}\n\t\t}\n\t}),\n\n\tpassword: fields.text({\n\t\tpromptLabel: 'Enter a password',\n\t\tpassword: true,\n\t\tvalidate: function (value, callback) {\n\t\t\tcallback(!value.length, value);\n\t\t}\n\t}),\n\n\tfavfood: fields.text({\n\t\tpromptLabel: 'What is your favorite food?'\n\t})\n}, { stopOnError: true }).prompt(function (err, value) {\n\tif (err) {\n\t\tconsole.error('There was an error!\\n' + err);\n\t} else {\n\t\tconsole.log('You entered ' + value);\n\t}\n});\n```\n\nArray-based example:\n\n```\nfields.set([\n\tfields.text({\n\t\tpromptLabel: 'Username',\n\t\tvalidate: function (value, callback) {\n\t\t\tcallback(!value.length, value);\n\t\t}\n\t}),\n\n\tfields.select({\n\t\tpromptLabel: 'Change password?',\n\t\tdisplay: 'prompt',\n\t\toptions: [ 'yes', 'no' ],\n\t\tnext: function (value) {\n\t\t\tif (value == 'no') {\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t}\n\t}),\n\n\tfields.text({\n\t\tpromptLabel: 'Enter a password',\n\t\tpassword: true,\n\t\tvalidate: function (value, callback) {\n\t\t\tcallback(!value.length, value);\n\t\t}\n\t}),\n\n\tfields.text({\n\t\tpromptLabel: 'What is your favorite food?'\n\t})\n]).prompt(function (err, value) {\n\tif (err) {\n\t\tconsole.error('There was an error!\\n' + err);\n\t} else {\n\t\tconsole.log('You entered ' + value);\n\t}\n});\n```\n\n# License\n\n(The MIT License)\n\nCopyright (c) 2013 Chris Barber\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "fields@0.1.12",
  "_from": "fields@~0.1.11"
}
