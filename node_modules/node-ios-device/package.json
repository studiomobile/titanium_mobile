{
  "name": "node-ios-device",
  "description": "iOS device library",
  "version": "0.2.2",
  "author": {
    "name": "Appcelerator, Inc.",
    "email": "info@appcelerator.com"
  },
  "maintainers": [
    {
      "name": "Chris Barber",
      "email": "cbarber@appcelerator.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/appcelerator/node-ios-device.git"
  },
  "keywords": [
    "appcelerator",
    "ios",
    "iphone",
    "ipad",
    "install",
    "mobiledevice",
    "mobile"
  ],
  "license": "Apache Public License v2",
  "gypfile": true,
  "main": "./ios-device",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# node-ios-device\n\nQueries connected iOS devices and installs apps.\n\n[![NPM](https://nodei.co/npm/node-ios-device.png?downloads=true&stars=true)](https://nodei.co/npm/node-ios-device/)\n\n## Prerequisites\n\nnode-ios-device is currently compatible with the following Node.js versions:\n\n * 0.8.0 - 0.8.26 (module API v1)\n * 0.10.0 - 0.10.26 (module API v11\n * 0.11.0 - 0.11.7 (module API v12)\n * 0.11.8 - 0.11.10 (module API v13)\n * 0.11.11 - 0.11.12 (module API v14)\n\nTo support newer module API versions, you will need to check for a new version\nof node-ios-device or build from source using the instructions below.\n\nCurrently, only Mac OS X is supported. Someday we may support Windows. You can\ninclude this module as an npm dependency regardless of the operating system you\nare installing your module.\n\n## Installation\n\nFrom NPM:\n\n\tnpm install node-ios-device\n\nFrom GitHub:\n\n\tnpm install git://github.com/appcelerator/node-ios-device.git\n\nFrom Source:\n\n\tsudo npm install -g node-gyp\n\tgit clone https://github.com/appcelerator/node-ios-device.git\n\tcd node-ios-device\n\tmake\n\nNote: The binaries are already precompiled and bundled with the node-ios-device\npackage. This may be un-node like, but makes life so much easier when this\nmodule is being download on Linux or Windows, especially when you don't have the\nbuild tools installed. There should be no need to rebuild node-ios-device unless\na new Node.js version is released or you want to make some customizations.\n\n## Example\n\n\tvar iosDevice = require('node-ios-device');\n\n\t// get all connected iOS devices\n\tiosDevice.devices(function (err, devices) {\n\t\tconsole.log('Connected devices:');\n\t\tconsole.log(devices);\n\t});\n\n\t// continuously watch for devices to be conected or disconnected\n\tiosDevice.trackDevices(function (err, devices) {\n\t\tconsole.log('Connected devices:');\n\t\tconsole.log(devices);\n\t});\n\n\t// install an iOS app\n\tiosDevice.installApp('<device udid>', '/path/to/my.app', function (err) {\n\t\tif (err) {\n\t\t\tconsole.error(err);\n\t\t} else {\n\t\t\tconsole.log('Success!');\n\t\t}\n\t});\n\n\t// dump the syslog output to the console\n\tiosDevice.log('<device udid>', function (msg) {\n\t\tconsole.log(msg);\n\t});\n\n## API\n\n### devices(callback)\n\nRetrieves an array of all connected iOS devices.\n\n* `{function} callback(err, devices)` - A function to call with the connected devices\n\t* `{null|Error} err` - An `Error` if there was a problem, otherwise `null`\n\t* `{Array<Object>} devices` - An array of Device objects\n\nDevice objects contain the following information:\n\n* `udid` - The device's unique device id (e.g. \"a4cbe14c0441a2bf87f397602653a4ac71eb0336\")\n* `name` - The name of the device (e.g. \"My iPhone\")\n* `buildVersion` - The build version (e.g. \"10B350\")\n* `cpuArchitecture` - The CPU architecture (e.g. \"armv7s\")\n* `deviceClass` - The type of device (e.g. \"iPhone\", \"iPad\")\n* `deviceColor` - The color of the device (e.g. \"black\", \"white\")\n* `hardwareModel` - The device module (e.g. \"[N41AP](http://theiphonewiki.com/wiki/N41ap)\")\n* `modelNumber` - The model number (e.g. \"MD636\")\n* `productType` - The product type or model id (e.g. \"iPhone5,1\")\n* `productVersion` - The iOS version (e.g. \"6.1.4\")\n* `serialNumber` - The device serial number (e.g. \"XXXXXXXXXXXX\")\n\nThere is more data that could have been retrieved from the device, but the\nproperties above seemed the most reasonable.\n\n### trackDevices(callback)\n\nContinuously retrieves an array of all connected iOS devices. Whenever a device\nis connected or disconnected, the specified callback is fired.\n\n* `{Function} callback(err, devices)` - A function to call with the connected devices\n\t* `{null|Error} err` - An `Error` if there was a problem, otherwise `null`\n\t* `{Array<Object>} devices` - An array of Device objects\n\nReturns a function to discontinue tracking:\n\n\tvar off = iosDevice.trackDevices(function (err, devices) {\n\t\tconsole.log('Connected devices:');\n\t\tconsole.log(devices);\n\t});\n\n\tsetTimeout(function () {\n\t\t// turn off tracking after 1 minute\n\t\toff();\n\t}, 60000);\n\n### installApp(udid, appPath, callback)\n\nInstalls an iOS app on the specified device.\n\n* `{String} udid` - The devices udid\n* `{String} appPath` - The path to the iOS .app\n* `{Function} callback(err)` - A function to call when the install finishes\n\t* `{null|Error} err` - An `Error` if there was a problem, otherwise `null`\n\nCurrently, an `appPath` that begins with `~` is not supported.\n\nThe `appPath` must resolve to an iOS .app, not the .ipa file.\n\n### log(udid, callback)\n\nRelays the iOS device's syslog line-by-line to the specified callback. The\ncallback is fired for every line. Empty lines are omitted.\n\n* `{String} udid` - The devices udid\n* `{Function} callback(msg)` - A function to call with each line from the syslog\n\t* `{String} msg` - The line from the syslog\n\nReturns a function to discontinue relaying the log output:\n\n\tvar off = iosDevice.log('<device udid>', function (msg) {\n\t\tconsole.log(msg);\n\t});\n\n\tsetTimeout(function () {\n\t\t// turn off logging after 1 minute\n\t\toff();\n\t}, 60000);\n\nAfter calling `log()`, it will print out several older messages. If you are only\ninterested in new messages, then you'll have to have use a timer and some sort\nof ready flag like this:\n\n\tvar ready = false;\n\tvar timer = null;\n\n\tiosDevice.log('<device udid>', function (msg) {\n\t\tif (ready) {\n\t\t\tconsole.log(msg);\n\t\t} else {\n\t\t\tclearTimeout(timer);\n\t\t\ttimer = setTimeout(function () {\n\t\t\t\tready = true;\n\t\t\t}, 500);\n\t\t}\n\t});\n\n\n\n## License\n\nThis project is open source and provided under the Apache Public License\n(version 2). Please make sure you see the `LICENSE` file included in this\ndistribution for more details on the license.  Also, please take notice of the\nprivacy notice at the end of the file.\n\nThis project contains `mobiledevice.h` from https://bitbucket.org/tristero/mobiledeviceaccess\nand is available under public domain.\n\n#### (C) Copyright 2012-2013, [Appcelerator](http://www.appcelerator.com/) Inc. All Rights Reserved.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/appcelerator/node-ios-device/issues"
  },
  "homepage": "https://github.com/appcelerator/node-ios-device",
  "_id": "node-ios-device@0.2.2",
  "dist": {
    "shasum": "118060f7d4e638688230dfe911c61248f04865be"
  },
  "_from": "node-ios-device@~0.2.1",
  "_resolved": "https://registry.npmjs.org/node-ios-device/-/node-ios-device-0.2.2.tgz"
}
